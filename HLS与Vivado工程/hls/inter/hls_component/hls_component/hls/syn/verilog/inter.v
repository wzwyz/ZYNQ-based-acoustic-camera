// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="inter_inter,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=4.167000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.817000,HLS_SYN_LAT=10,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=496,HLS_SYN_LUT=294,HLS_VERSION=2024_1}" *)

module inter (
        ap_clk,
        ap_rst,
        data_left,
        rate_left,
        data_right,
        rate_right,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [23:0] data_left;
input  [4:0] rate_left;
input  [23:0] data_right;
input  [5:0] rate_right;
output  [23:0] ap_return;

reg   [4:0] rate_left_read_reg_151;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] rate_left_read_reg_151_pp0_iter1_reg;
reg   [4:0] rate_left_read_reg_151_pp0_iter2_reg;
reg   [23:0] data_left_read_reg_156;
reg   [23:0] data_left_read_reg_156_pp0_iter1_reg;
reg  signed [23:0] data_left_read_reg_156_pp0_iter2_reg;
wire   [28:0] grp_fu_87_p2;
reg  signed [28:0] right_reg_181;
wire  signed [28:0] grp_fu_144_p3;
reg   [28:0] tmp2_reg_186;
reg    ap_enable_reg_pp0_iter6;
wire   [28:0] grp_round_fixed_29_24_s_fu_74_ap_return;
reg   [28:0] ref_tmp7_reg_191;
reg   [23:0] tmp1_reg_196;
wire   [4:0] trunc_ln13_fu_109_p1;
reg   [4:0] trunc_ln13_reg_203;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
wire    grp_round_fixed_29_24_s_fu_74_ap_start;
wire    grp_round_fixed_29_24_s_fu_74_ap_done;
wire    grp_round_fixed_29_24_s_fu_74_ap_idle;
wire    grp_round_fixed_29_24_s_fu_74_ap_ready;
reg    grp_round_fixed_29_24_s_fu_74_ap_start_reg;
wire    ap_block_pp0_stage0_ignoreCallOp30;
wire    ap_block_pp0_stage0;
wire   [5:0] grp_fu_87_p1;
wire   [0:0] icmp_ln13_fu_120_p2;
wire   [23:0] add_ln13_fu_125_p2;
wire   [0:0] tmp_fu_113_p3;
wire   [23:0] select_ln13_fu_130_p3;
wire   [4:0] grp_fu_144_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [28:0] grp_fu_144_p10;
wire   [28:0] grp_fu_87_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 grp_round_fixed_29_24_s_fu_74_ap_start_reg = 1'b0;
end

inter_round_fixed_29_24_s grp_round_fixed_29_24_s_fu_74(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_round_fixed_29_24_s_fu_74_ap_start),
    .ap_done(grp_round_fixed_29_24_s_fu_74_ap_done),
    .ap_idle(grp_round_fixed_29_24_s_fu_74_ap_idle),
    .ap_ready(grp_round_fixed_29_24_s_fu_74_ap_ready),
    .x(tmp2_reg_186),
    .ap_return(grp_round_fixed_29_24_s_fu_74_ap_return)
);

inter_mul_24s_6ns_29_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 29 ))
mul_24s_6ns_29_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_right),
    .din1(grp_fu_87_p1),
    .ce(1'b1),
    .dout(grp_fu_87_p2)
);

inter_mac_muladd_24s_5ns_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_24s_5ns_29s_29_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_left_read_reg_156_pp0_iter2_reg),
    .din1(grp_fu_144_p1),
    .din2(right_reg_181),
    .ce(1'b1),
    .dout(grp_fu_144_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_round_fixed_29_24_s_fu_74_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            grp_round_fixed_29_24_s_fu_74_ap_start_reg <= 1'b1;
        end else if ((grp_round_fixed_29_24_s_fu_74_ap_ready == 1'b1)) begin
            grp_round_fixed_29_24_s_fu_74_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_left_read_reg_156 <= data_left;
        data_left_read_reg_156_pp0_iter1_reg <= data_left_read_reg_156;
        rate_left_read_reg_151 <= rate_left;
        rate_left_read_reg_151_pp0_iter1_reg <= rate_left_read_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        data_left_read_reg_156_pp0_iter2_reg <= data_left_read_reg_156_pp0_iter1_reg;
        rate_left_read_reg_151_pp0_iter2_reg <= rate_left_read_reg_151_pp0_iter1_reg;
        ref_tmp7_reg_191 <= grp_round_fixed_29_24_s_fu_74_ap_return;
        right_reg_181 <= grp_fu_87_p2;
        tmp1_reg_196 <= {{grp_round_fixed_29_24_s_fu_74_ap_return[28:5]}};
        trunc_ln13_reg_203 <= trunc_ln13_fu_109_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_reg_186 <= grp_fu_144_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_125_p2 = (tmp1_reg_196 + 24'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp30 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ((tmp_fu_113_p3[0:0] == 1'b1) ? select_ln13_fu_130_p3 : tmp1_reg_196);

assign grp_fu_144_p1 = grp_fu_144_p10;

assign grp_fu_144_p10 = rate_left_read_reg_151_pp0_iter2_reg;

assign grp_fu_87_p1 = grp_fu_87_p10;

assign grp_fu_87_p10 = rate_right;

assign grp_round_fixed_29_24_s_fu_74_ap_start = grp_round_fixed_29_24_s_fu_74_ap_start_reg;

assign icmp_ln13_fu_120_p2 = ((trunc_ln13_reg_203 != 5'd0) ? 1'b1 : 1'b0);

assign select_ln13_fu_130_p3 = ((icmp_ln13_fu_120_p2[0:0] == 1'b1) ? add_ln13_fu_125_p2 : tmp1_reg_196);

assign tmp_fu_113_p3 = ref_tmp7_reg_191[32'd28];

assign trunc_ln13_fu_109_p1 = grp_round_fixed_29_24_s_fu_74_ap_return[4:0];

endmodule //inter
