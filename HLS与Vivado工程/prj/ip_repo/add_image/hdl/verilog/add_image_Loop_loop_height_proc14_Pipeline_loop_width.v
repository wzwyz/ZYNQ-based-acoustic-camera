// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module add_image_Loop_loop_height_proc14_Pipeline_loop_width (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        CAM_STREAM_TVALID,
        camImg_data_din,
        camImg_data_num_data_valid,
        camImg_data_fifo_cap,
        camImg_data_full_n,
        camImg_data_write,
        start_1,
        CAM_STREAM_TDATA,
        CAM_STREAM_TREADY,
        CAM_STREAM_TKEEP,
        CAM_STREAM_TSTRB,
        CAM_STREAM_TUSER,
        CAM_STREAM_TLAST,
        CAM_STREAM_TID,
        CAM_STREAM_TDEST,
        start_3_out,
        start_3_out_ap_vld,
        eol_2_out,
        eol_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   CAM_STREAM_TVALID;
output  [23:0] camImg_data_din;
input  [2:0] camImg_data_num_data_valid;
input  [2:0] camImg_data_fifo_cap;
input   camImg_data_full_n;
output   camImg_data_write;
input  [31:0] start_1;
input  [23:0] CAM_STREAM_TDATA;
output   CAM_STREAM_TREADY;
input  [2:0] CAM_STREAM_TKEEP;
input  [2:0] CAM_STREAM_TSTRB;
input  [0:0] CAM_STREAM_TUSER;
input  [0:0] CAM_STREAM_TLAST;
input  [0:0] CAM_STREAM_TID;
input  [0:0] CAM_STREAM_TDEST;
output  [31:0] start_3_out;
output   start_3_out_ap_vld;
output  [0:0] eol_2_out;
output   eol_2_out_ap_vld;

reg ap_idle;
reg CAM_STREAM_TREADY;
reg start_3_out_ap_vld;
reg eol_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln122_fu_158_p2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln122_reg_252;
reg   [0:0] or_ln134_reg_270;
reg   [0:0] or_ln131_reg_266;
reg    ap_predicate_op48_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    CAM_STREAM_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    camImg_data_blk_n;
reg   [0:0] eol_2_reg_108;
reg    ap_block_pp0_stage0_11001;
reg   [23:0] axi_data_reg_256;
wire   [0:0] or_ln131_fu_188_p2;
wire   [0:0] or_ln134_fu_194_p2;
wire    ap_loop_init;
reg   [31:0] ap_phi_mux_start_phi_fu_123_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_start_reg_120;
reg   [31:0] ap_phi_mux_start_4_phi_fu_133_p4;
wire   [31:0] ap_phi_reg_pp0_iter1_start_4_reg_130;
reg   [31:0] j_2_fu_62;
wire   [31:0] j_fu_200_p2;
wire   [31:0] j_11_fu_214_p2;
reg   [31:0] ap_sig_allocacmp_j_10;
reg   [31:0] start_3_fu_66;
reg    ap_block_pp0_stage0_01001;
reg    camImg_data_write_local;
wire   [0:0] icmp_ln131_fu_176_p2;
wire   [0:0] xor_ln131_fu_182_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_282;
reg    ap_condition_287;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_2_fu_62 = 32'd0;
#0 start_3_fu_66 = 32'd0;
#0 ap_done_reg = 1'b0;
end

add_image_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_282)) begin
            eol_2_reg_108 <= CAM_STREAM_TLAST;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            eol_2_reg_108 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_2_fu_62 <= 32'd0;
        end else if (((icmp_ln122_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_2_fu_62 <= j_11_fu_214_p2;
        end else if ((1'b1 == ap_condition_287)) begin
            j_2_fu_62 <= j_fu_200_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            start_3_fu_66 <= start_1;
        end else if (((icmp_ln122_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            start_3_fu_66 <= ap_phi_mux_start_4_phi_fu_133_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_data_reg_256 <= CAM_STREAM_TDATA;
        icmp_ln122_reg_252 <= icmp_ln122_fu_158_p2;
        or_ln131_reg_266 <= or_ln131_fu_188_p2;
        or_ln134_reg_270 <= or_ln134_fu_194_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln122_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CAM_STREAM_TDATA_blk_n = CAM_STREAM_TVALID;
    end else begin
        CAM_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln122_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CAM_STREAM_TREADY = 1'b1;
    end else begin
        CAM_STREAM_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln122_fu_158_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln122_fu_158_p2 == 1'd1) & (or_ln134_fu_194_p2 == 1'd0) & (or_ln131_fu_188_p2 == 1'd1))) begin
        ap_phi_mux_start_4_phi_fu_133_p4 = 32'd0;
    end else if ((((icmp_ln122_fu_158_p2 == 1'd1) & (or_ln131_fu_188_p2 == 1'd0)) | ((icmp_ln122_fu_158_p2 == 1'd1) & (or_ln134_fu_194_p2 == 1'd1)))) begin
        ap_phi_mux_start_4_phi_fu_133_p4 = ap_phi_mux_start_phi_fu_123_p4;
    end else begin
        ap_phi_mux_start_4_phi_fu_133_p4 = ap_phi_reg_pp0_iter1_start_4_reg_130;
    end
end

always @ (*) begin
    if ((icmp_ln122_fu_158_p2 == 1'd1)) begin
        if ((or_ln131_fu_188_p2 == 1'd0)) begin
            ap_phi_mux_start_phi_fu_123_p4 = 32'd1;
        end else if (((or_ln134_fu_194_p2 == 1'd1) & (or_ln131_fu_188_p2 == 1'd1))) begin
            ap_phi_mux_start_phi_fu_123_p4 = start_3_fu_66;
        end else begin
            ap_phi_mux_start_phi_fu_123_p4 = ap_phi_reg_pp0_iter1_start_reg_120;
        end
    end else begin
        ap_phi_mux_start_phi_fu_123_p4 = ap_phi_reg_pp0_iter1_start_reg_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln122_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln134_fu_194_p2 == 1'd0) & (or_ln131_fu_188_p2 == 1'd1))) begin
        ap_sig_allocacmp_j_10 = j_fu_200_p2;
    end else begin
        ap_sig_allocacmp_j_10 = j_2_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op48_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        camImg_data_blk_n = camImg_data_full_n;
    end else begin
        camImg_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op48_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        camImg_data_write_local = 1'b1;
    end else begin
        camImg_data_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln122_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        eol_2_out_ap_vld = 1'b1;
    end else begin
        eol_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln122_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        start_3_out_ap_vld = 1'b1;
    end else begin
        start_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln122_fu_158_p2 == 1'd1) & (1'b0 == CAM_STREAM_TVALID));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op48_write_state3 == 1'b1) & (camImg_data_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_282 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln122_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_287 = ((icmp_ln122_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (or_ln134_fu_194_p2 == 1'd0) & (or_ln131_fu_188_p2 == 1'd1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter1_start_4_reg_130 = 'bx;

assign ap_phi_reg_pp0_iter1_start_reg_120 = 'bx;

always @ (*) begin
    ap_predicate_op48_write_state3 = (((or_ln131_reg_266 == 1'd0) & (icmp_ln122_reg_252 == 1'd1)) | ((or_ln134_reg_270 == 1'd1) & (icmp_ln122_reg_252 == 1'd1)));
end

assign ap_ready = ap_ready_sig;

assign camImg_data_din = axi_data_reg_256;

assign camImg_data_write = camImg_data_write_local;

assign eol_2_out = eol_2_reg_108;

assign icmp_ln122_fu_158_p2 = (($signed(j_2_fu_62) < $signed(32'd1280)) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_176_p2 = ((start_3_fu_66 != 32'd0) ? 1'b1 : 1'b0);

assign j_11_fu_214_p2 = (ap_sig_allocacmp_j_10 + 32'd1);

assign j_fu_200_p2 = ($signed(j_2_fu_62) + $signed(32'd4294967295));

assign or_ln131_fu_188_p2 = (xor_ln131_fu_182_p2 | icmp_ln131_fu_176_p2);

assign or_ln134_fu_194_p2 = (icmp_ln131_fu_176_p2 | CAM_STREAM_TUSER);

assign start_3_out = start_3_fu_66;

assign xor_ln131_fu_182_p2 = (1'd1 ^ CAM_STREAM_TUSER);

endmodule //add_image_Loop_loop_height_proc14_Pipeline_loop_width
