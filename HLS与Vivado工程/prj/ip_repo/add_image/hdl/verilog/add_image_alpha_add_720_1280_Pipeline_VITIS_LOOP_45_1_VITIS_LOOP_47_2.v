// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module add_image_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        srcImg_data_dout,
        srcImg_data_num_data_valid,
        srcImg_data_fifo_cap,
        srcImg_data_empty_n,
        srcImg_data_read,
        camImg_data_dout,
        camImg_data_num_data_valid,
        camImg_data_fifo_cap,
        camImg_data_empty_n,
        camImg_data_read,
        dstImg_data_din,
        dstImg_data_num_data_valid,
        dstImg_data_fifo_cap,
        dstImg_data_full_n,
        dstImg_data_write,
        empty,
        sub
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] srcImg_data_dout;
input  [2:0] srcImg_data_num_data_valid;
input  [2:0] srcImg_data_fifo_cap;
input   srcImg_data_empty_n;
output   srcImg_data_read;
input  [23:0] camImg_data_dout;
input  [2:0] camImg_data_num_data_valid;
input  [2:0] camImg_data_fifo_cap;
input   camImg_data_empty_n;
output   camImg_data_read;
output  [23:0] dstImg_data_din;
input  [2:0] dstImg_data_num_data_valid;
input  [2:0] dstImg_data_fifo_cap;
input   dstImg_data_full_n;
output   dstImg_data_write;
input  [15:0] empty;
input  [15:0] sub;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_167_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    srcImg_data_blk_n;
wire    ap_block_pp0_stage0;
reg    camImg_data_blk_n;
reg    dstImg_data_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] cam_B_fu_125_p1;
reg   [7:0] cam_B_reg_288;
reg   [7:0] cam_B_reg_288_pp0_iter1_reg;
reg   [7:0] cam_G_reg_293;
reg   [7:0] cam_G_reg_293_pp0_iter1_reg;
reg   [7:0] cam_R_reg_298;
reg   [7:0] cam_R_reg_298_pp0_iter1_reg;
wire   [15:0] mul_ln62_1_fu_181_p2;
wire   [15:0] mul_ln63_1_fu_189_p2;
wire   [15:0] mul_ln64_1_fu_197_p2;
reg   [19:0] indvar_flatten2_fu_58;
wire   [19:0] add_ln45_fu_161_p2;
wire    ap_loop_init;
reg   [19:0] ap_sig_allocacmp_indvar_flatten2_load;
reg    srcImg_data_read_local;
reg    camImg_data_read_local;
wire   [23:0] dst_data_fu_229_p4;
reg    ap_block_pp0_stage0_01001;
reg    dstImg_data_write_local;
wire   [7:0] src_B_fu_101_p1;
wire   [7:0] src_G_fu_105_p4;
wire   [7:0] src_R_fu_115_p4;
wire   [7:0] mul_ln62_1_fu_181_p1;
wire   [7:0] mul_ln63_1_fu_189_p1;
wire   [7:0] mul_ln64_1_fu_197_p1;
wire  signed [15:0] dst_B_fu_202_p1;
wire   [15:0] grp_fu_240_p3;
wire  signed [15:0] dst_G_fu_211_p1;
wire   [15:0] grp_fu_249_p3;
wire  signed [15:0] dst_R_fu_220_p1;
wire   [15:0] grp_fu_258_p3;
wire   [7:0] dst_R_fu_220_p4;
wire   [7:0] dst_G_fu_211_p4;
wire   [7:0] dst_B_fu_202_p4;
wire   [7:0] grp_fu_240_p1;
wire   [7:0] grp_fu_249_p1;
wire   [7:0] grp_fu_258_p1;
reg    grp_fu_240_ce;
reg    grp_fu_249_ce;
reg    grp_fu_258_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [15:0] grp_fu_240_p10;
wire   [15:0] grp_fu_249_p10;
wire   [15:0] grp_fu_258_p10;
wire   [15:0] mul_ln62_1_fu_181_p10;
wire   [15:0] mul_ln63_1_fu_189_p10;
wire   [15:0] mul_ln64_1_fu_197_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 indvar_flatten2_fu_58 = 20'd0;
#0 ap_done_reg = 1'b0;
end

add_image_mul_16s_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_16s_8ns_16_1_1_U71(
    .din0(sub),
    .din1(mul_ln62_1_fu_181_p1),
    .dout(mul_ln62_1_fu_181_p2)
);

add_image_mul_16s_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_16s_8ns_16_1_1_U72(
    .din0(sub),
    .din1(mul_ln63_1_fu_189_p1),
    .dout(mul_ln63_1_fu_189_p2)
);

add_image_mul_16s_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_16s_8ns_16_1_1_U73(
    .din0(sub),
    .din1(mul_ln64_1_fu_197_p1),
    .dout(mul_ln64_1_fu_197_p2)
);

add_image_mac_muladd_16s_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_8ns_16ns_16_4_1_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty),
    .din1(grp_fu_240_p1),
    .din2(mul_ln62_1_fu_181_p2),
    .ce(grp_fu_240_ce),
    .dout(grp_fu_240_p3)
);

add_image_mac_muladd_16s_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_8ns_16ns_16_4_1_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty),
    .din1(grp_fu_249_p1),
    .din2(mul_ln63_1_fu_189_p2),
    .ce(grp_fu_249_ce),
    .dout(grp_fu_249_p3)
);

add_image_mac_muladd_16s_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_8ns_16ns_16_4_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty),
    .din1(grp_fu_258_p1),
    .din2(mul_ln64_1_fu_197_p2),
    .ce(grp_fu_258_ce),
    .dout(grp_fu_258_p3)
);

add_image_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_start_int == 1'b1)) begin
            indvar_flatten2_fu_58 <= add_ln45_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten2_fu_58 <= 20'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        cam_B_reg_288 <= cam_B_fu_125_p1;
        cam_B_reg_288_pp0_iter1_reg <= cam_B_reg_288;
        cam_G_reg_293 <= {{camImg_data_dout[15:8]}};
        cam_G_reg_293_pp0_iter1_reg <= cam_G_reg_293;
        cam_R_reg_298 <= {{camImg_data_dout[23:16]}};
        cam_R_reg_298_pp0_iter1_reg <= cam_R_reg_298;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_167_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten2_load = 20'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten2_load = indvar_flatten2_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        camImg_data_blk_n = camImg_data_empty_n;
    end else begin
        camImg_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        camImg_data_read_local = 1'b1;
    end else begin
        camImg_data_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dstImg_data_blk_n = dstImg_data_full_n;
    end else begin
        dstImg_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dstImg_data_write_local = 1'b1;
    end else begin
        dstImg_data_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_240_ce = 1'b1;
    end else begin
        grp_fu_240_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_249_ce = 1'b1;
    end else begin
        grp_fu_249_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_258_ce = 1'b1;
    end else begin
        grp_fu_258_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_data_blk_n = srcImg_data_empty_n;
    end else begin
        srcImg_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_data_read_local = 1'b1;
    end else begin
        srcImg_data_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_161_p2 = (ap_sig_allocacmp_indvar_flatten2_load + 20'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((camImg_data_empty_n == 1'b0) | (srcImg_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (dstImg_data_full_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign camImg_data_read = camImg_data_read_local;

assign cam_B_fu_125_p1 = camImg_data_dout[7:0];

assign dstImg_data_din = dst_data_fu_229_p4;

assign dstImg_data_write = dstImg_data_write_local;

assign dst_B_fu_202_p1 = grp_fu_240_p3;

assign dst_B_fu_202_p4 = {{dst_B_fu_202_p1[15:8]}};

assign dst_G_fu_211_p1 = grp_fu_249_p3;

assign dst_G_fu_211_p4 = {{dst_G_fu_211_p1[15:8]}};

assign dst_R_fu_220_p1 = grp_fu_258_p3;

assign dst_R_fu_220_p4 = {{dst_R_fu_220_p1[15:8]}};

assign dst_data_fu_229_p4 = {{{dst_R_fu_220_p4}, {dst_G_fu_211_p4}}, {dst_B_fu_202_p4}};

assign grp_fu_240_p1 = grp_fu_240_p10;

assign grp_fu_240_p10 = src_B_fu_101_p1;

assign grp_fu_249_p1 = grp_fu_249_p10;

assign grp_fu_249_p10 = src_G_fu_105_p4;

assign grp_fu_258_p1 = grp_fu_258_p10;

assign grp_fu_258_p10 = src_R_fu_115_p4;

assign icmp_ln45_fu_167_p2 = ((ap_sig_allocacmp_indvar_flatten2_load == 20'd921599) ? 1'b1 : 1'b0);

assign mul_ln62_1_fu_181_p1 = mul_ln62_1_fu_181_p10;

assign mul_ln62_1_fu_181_p10 = cam_B_reg_288_pp0_iter1_reg;

assign mul_ln63_1_fu_189_p1 = mul_ln63_1_fu_189_p10;

assign mul_ln63_1_fu_189_p10 = cam_G_reg_293_pp0_iter1_reg;

assign mul_ln64_1_fu_197_p1 = mul_ln64_1_fu_197_p10;

assign mul_ln64_1_fu_197_p10 = cam_R_reg_298_pp0_iter1_reg;

assign srcImg_data_read = srcImg_data_read_local;

assign src_B_fu_101_p1 = srcImg_data_dout[7:0];

assign src_G_fu_105_p4 = {{srcImg_data_dout[15:8]}};

assign src_R_fu_115_p4 = {{srcImg_data_dout[23:16]}};

endmodule //add_image_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2
