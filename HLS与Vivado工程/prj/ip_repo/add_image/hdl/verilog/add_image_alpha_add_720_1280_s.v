// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module add_image_alpha_add_720_1280_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        srcImg_data_dout,
        srcImg_data_num_data_valid,
        srcImg_data_fifo_cap,
        srcImg_data_empty_n,
        srcImg_data_read,
        camImg_data_dout,
        camImg_data_num_data_valid,
        camImg_data_fifo_cap,
        camImg_data_empty_n,
        camImg_data_read,
        dstImg_data_din,
        dstImg_data_num_data_valid,
        dstImg_data_fifo_cap,
        dstImg_data_full_n,
        dstImg_data_write,
        alpha_dout,
        alpha_num_data_valid,
        alpha_fifo_cap,
        alpha_empty_n,
        alpha_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] srcImg_data_dout;
input  [2:0] srcImg_data_num_data_valid;
input  [2:0] srcImg_data_fifo_cap;
input   srcImg_data_empty_n;
output   srcImg_data_read;
input  [23:0] camImg_data_dout;
input  [2:0] camImg_data_num_data_valid;
input  [2:0] camImg_data_fifo_cap;
input   camImg_data_empty_n;
output   camImg_data_read;
output  [23:0] dstImg_data_din;
input  [2:0] dstImg_data_num_data_valid;
input  [2:0] dstImg_data_fifo_cap;
input   dstImg_data_full_n;
output   dstImg_data_write;
input  [31:0] alpha_dout;
input  [2:0] alpha_num_data_valid;
input  [2:0] alpha_fifo_cap;
input   alpha_empty_n;
output   alpha_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg srcImg_data_read;
reg camImg_data_read;
reg dstImg_data_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    alpha_blk_n;
wire   [15:0] empty_fu_54_p1;
reg   [15:0] empty_reg_64;
reg    ap_block_state1;
wire   [15:0] sub_fu_58_p2;
reg   [15:0] sub_reg_70;
wire    ap_CS_fsm_state2;
wire    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start;
wire    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done;
wire    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_idle;
wire    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_ready;
wire    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_srcImg_data_read;
wire    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_camImg_data_read;
wire   [23:0] grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_din;
wire    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_write;
reg    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    alpha_read_local;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg = 1'b0;
end

add_image_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2 grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start),
    .ap_done(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done),
    .ap_idle(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_idle),
    .ap_ready(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_ready),
    .srcImg_data_dout(srcImg_data_dout),
    .srcImg_data_num_data_valid(3'd0),
    .srcImg_data_fifo_cap(3'd0),
    .srcImg_data_empty_n(srcImg_data_empty_n),
    .srcImg_data_read(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_srcImg_data_read),
    .camImg_data_dout(camImg_data_dout),
    .camImg_data_num_data_valid(3'd0),
    .camImg_data_fifo_cap(3'd0),
    .camImg_data_empty_n(camImg_data_empty_n),
    .camImg_data_read(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_camImg_data_read),
    .dstImg_data_din(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_din),
    .dstImg_data_num_data_valid(3'd0),
    .dstImg_data_fifo_cap(3'd0),
    .dstImg_data_full_n(dstImg_data_full_n),
    .dstImg_data_write(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_write),
    .empty(empty_reg_64),
    .sub(sub_reg_70)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_ready == 1'b1)) begin
            grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_64 <= empty_fu_54_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_reg_70 <= sub_fu_58_p2;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_blk_n = alpha_empty_n;
    end else begin
        alpha_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_read_local = 1'b1;
    end else begin
        alpha_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        camImg_data_read = grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_camImg_data_read;
    end else begin
        camImg_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dstImg_data_write = grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_write;
    end else begin
        dstImg_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        srcImg_data_read = grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_srcImg_data_read;
    end else begin
        srcImg_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign alpha_read = alpha_read_local;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign dstImg_data_din = grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_din;

assign empty_fu_54_p1 = alpha_dout[15:0];

assign grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start = grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg;

assign start_out = real_start;

assign sub_fu_58_p2 = (16'd255 - empty_reg_64);

endmodule //add_image_alpha_add_720_1280_s
