-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_image is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    SRC_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    SRC_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    SRC_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    SRC_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    CAM_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    CAM_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    CAM_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    CAM_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    CAM_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    CAM_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    CAM_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TVALID : IN STD_LOGIC;
    SRC_STREAM_TREADY : OUT STD_LOGIC;
    CAM_STREAM_TVALID : IN STD_LOGIC;
    CAM_STREAM_TREADY : OUT STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC );
end;


architecture behav of add_image is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "add_image_add_image,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=13.468000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.657643,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=982,HLS_SYN_LUT=1554,HLS_VERSION=2024_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal alpha : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_alpha_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_alpha_c_write : STD_LOGIC;
    signal Loop_loop_height_proc3_U0_ap_start : STD_LOGIC;
    signal Loop_loop_height_proc3_U0_ap_done : STD_LOGIC;
    signal Loop_loop_height_proc3_U0_ap_continue : STD_LOGIC;
    signal Loop_loop_height_proc3_U0_ap_idle : STD_LOGIC;
    signal Loop_loop_height_proc3_U0_ap_ready : STD_LOGIC;
    signal Loop_loop_height_proc3_U0_SRC_STREAM_TREADY : STD_LOGIC;
    signal Loop_loop_height_proc3_U0_srcImg_data_din : STD_LOGIC_VECTOR (23 downto 0);
    signal Loop_loop_height_proc3_U0_srcImg_data_write : STD_LOGIC;
    signal Loop_loop_height_proc14_U0_ap_start : STD_LOGIC;
    signal Loop_loop_height_proc14_U0_ap_done : STD_LOGIC;
    signal Loop_loop_height_proc14_U0_ap_continue : STD_LOGIC;
    signal Loop_loop_height_proc14_U0_ap_idle : STD_LOGIC;
    signal Loop_loop_height_proc14_U0_ap_ready : STD_LOGIC;
    signal Loop_loop_height_proc14_U0_CAM_STREAM_TREADY : STD_LOGIC;
    signal Loop_loop_height_proc14_U0_camImg_data_din : STD_LOGIC_VECTOR (23 downto 0);
    signal Loop_loop_height_proc14_U0_camImg_data_write : STD_LOGIC;
    signal alpha_add_720_1280_U0_ap_start : STD_LOGIC;
    signal alpha_add_720_1280_U0_ap_done : STD_LOGIC;
    signal alpha_add_720_1280_U0_ap_continue : STD_LOGIC;
    signal alpha_add_720_1280_U0_ap_idle : STD_LOGIC;
    signal alpha_add_720_1280_U0_ap_ready : STD_LOGIC;
    signal alpha_add_720_1280_U0_start_out : STD_LOGIC;
    signal alpha_add_720_1280_U0_start_write : STD_LOGIC;
    signal alpha_add_720_1280_U0_srcImg_data_read : STD_LOGIC;
    signal alpha_add_720_1280_U0_camImg_data_read : STD_LOGIC;
    signal alpha_add_720_1280_U0_dstImg_data_din : STD_LOGIC_VECTOR (23 downto 0);
    signal alpha_add_720_1280_U0_dstImg_data_write : STD_LOGIC;
    signal alpha_add_720_1280_U0_alpha_read : STD_LOGIC;
    signal Loop_loop_height_proc25_U0_ap_start : STD_LOGIC;
    signal Loop_loop_height_proc25_U0_ap_done : STD_LOGIC;
    signal Loop_loop_height_proc25_U0_ap_continue : STD_LOGIC;
    signal Loop_loop_height_proc25_U0_ap_idle : STD_LOGIC;
    signal Loop_loop_height_proc25_U0_ap_ready : STD_LOGIC;
    signal Loop_loop_height_proc25_U0_dstImg_data_read : STD_LOGIC;
    signal Loop_loop_height_proc25_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Loop_loop_height_proc25_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal Loop_loop_height_proc25_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_loop_height_proc25_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_loop_height_proc25_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_loop_height_proc25_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_loop_height_proc25_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_loop_height_proc25_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_c_full_n : STD_LOGIC;
    signal alpha_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal alpha_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal alpha_c_empty_n : STD_LOGIC;
    signal srcImg_data_full_n : STD_LOGIC;
    signal srcImg_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal srcImg_data_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal srcImg_data_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal srcImg_data_empty_n : STD_LOGIC;
    signal camImg_data_full_n : STD_LOGIC;
    signal camImg_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal camImg_data_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal camImg_data_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal camImg_data_empty_n : STD_LOGIC;
    signal dstImg_data_full_n : STD_LOGIC;
    signal dstImg_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal dstImg_data_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal dstImg_data_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal dstImg_data_empty_n : STD_LOGIC;
    signal start_for_alpha_add_720_1280_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_alpha_add_720_1280_U0_full_n : STD_LOGIC;
    signal start_for_alpha_add_720_1280_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_alpha_add_720_1280_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_loop_height_proc25_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_loop_height_proc25_U0_full_n : STD_LOGIC;
    signal start_for_Loop_loop_height_proc25_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_loop_height_proc25_U0_empty_n : STD_LOGIC;

    component add_image_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        alpha : IN STD_LOGIC_VECTOR (31 downto 0);
        alpha_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        alpha_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        alpha_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        alpha_c_full_n : IN STD_LOGIC;
        alpha_c_write : OUT STD_LOGIC );
    end component;


    component add_image_Loop_loop_height_proc3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SRC_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        SRC_STREAM_TVALID : IN STD_LOGIC;
        SRC_STREAM_TREADY : OUT STD_LOGIC;
        SRC_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        SRC_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        SRC_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        srcImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        srcImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        srcImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        srcImg_data_full_n : IN STD_LOGIC;
        srcImg_data_write : OUT STD_LOGIC );
    end component;


    component add_image_Loop_loop_height_proc14 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        CAM_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        CAM_STREAM_TVALID : IN STD_LOGIC;
        CAM_STREAM_TREADY : OUT STD_LOGIC;
        CAM_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        CAM_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        CAM_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        CAM_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        CAM_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        CAM_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        camImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        camImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        camImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        camImg_data_full_n : IN STD_LOGIC;
        camImg_data_write : OUT STD_LOGIC );
    end component;


    component add_image_alpha_add_720_1280_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        srcImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        srcImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        srcImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        srcImg_data_empty_n : IN STD_LOGIC;
        srcImg_data_read : OUT STD_LOGIC;
        camImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        camImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        camImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        camImg_data_empty_n : IN STD_LOGIC;
        camImg_data_read : OUT STD_LOGIC;
        dstImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        dstImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        dstImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        dstImg_data_full_n : IN STD_LOGIC;
        dstImg_data_write : OUT STD_LOGIC;
        alpha_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        alpha_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        alpha_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        alpha_empty_n : IN STD_LOGIC;
        alpha_read : OUT STD_LOGIC );
    end component;


    component add_image_Loop_loop_height_proc25 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dstImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        dstImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        dstImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        dstImg_data_empty_n : IN STD_LOGIC;
        dstImg_data_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component add_image_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component add_image_fifo_w24_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component add_image_start_for_alpha_add_720_1280_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component add_image_start_for_Loop_loop_height_proc25_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component add_image_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        alpha : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    control_s_axi_U : component add_image_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        alpha => alpha);

    entry_proc_U0 : component add_image_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_alpha_add_720_1280_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        alpha => alpha,
        alpha_c_din => entry_proc_U0_alpha_c_din,
        alpha_c_num_data_valid => alpha_c_num_data_valid,
        alpha_c_fifo_cap => alpha_c_fifo_cap,
        alpha_c_full_n => alpha_c_full_n,
        alpha_c_write => entry_proc_U0_alpha_c_write);

    Loop_loop_height_proc3_U0 : component add_image_Loop_loop_height_proc3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_loop_height_proc3_U0_ap_start,
        ap_done => Loop_loop_height_proc3_U0_ap_done,
        ap_continue => Loop_loop_height_proc3_U0_ap_continue,
        ap_idle => Loop_loop_height_proc3_U0_ap_idle,
        ap_ready => Loop_loop_height_proc3_U0_ap_ready,
        SRC_STREAM_TDATA => SRC_STREAM_TDATA,
        SRC_STREAM_TVALID => SRC_STREAM_TVALID,
        SRC_STREAM_TREADY => Loop_loop_height_proc3_U0_SRC_STREAM_TREADY,
        SRC_STREAM_TKEEP => SRC_STREAM_TKEEP,
        SRC_STREAM_TSTRB => SRC_STREAM_TSTRB,
        SRC_STREAM_TUSER => SRC_STREAM_TUSER,
        SRC_STREAM_TLAST => SRC_STREAM_TLAST,
        SRC_STREAM_TID => SRC_STREAM_TID,
        SRC_STREAM_TDEST => SRC_STREAM_TDEST,
        srcImg_data_din => Loop_loop_height_proc3_U0_srcImg_data_din,
        srcImg_data_num_data_valid => srcImg_data_num_data_valid,
        srcImg_data_fifo_cap => srcImg_data_fifo_cap,
        srcImg_data_full_n => srcImg_data_full_n,
        srcImg_data_write => Loop_loop_height_proc3_U0_srcImg_data_write);

    Loop_loop_height_proc14_U0 : component add_image_Loop_loop_height_proc14
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_loop_height_proc14_U0_ap_start,
        ap_done => Loop_loop_height_proc14_U0_ap_done,
        ap_continue => Loop_loop_height_proc14_U0_ap_continue,
        ap_idle => Loop_loop_height_proc14_U0_ap_idle,
        ap_ready => Loop_loop_height_proc14_U0_ap_ready,
        CAM_STREAM_TDATA => CAM_STREAM_TDATA,
        CAM_STREAM_TVALID => CAM_STREAM_TVALID,
        CAM_STREAM_TREADY => Loop_loop_height_proc14_U0_CAM_STREAM_TREADY,
        CAM_STREAM_TKEEP => CAM_STREAM_TKEEP,
        CAM_STREAM_TSTRB => CAM_STREAM_TSTRB,
        CAM_STREAM_TUSER => CAM_STREAM_TUSER,
        CAM_STREAM_TLAST => CAM_STREAM_TLAST,
        CAM_STREAM_TID => CAM_STREAM_TID,
        CAM_STREAM_TDEST => CAM_STREAM_TDEST,
        camImg_data_din => Loop_loop_height_proc14_U0_camImg_data_din,
        camImg_data_num_data_valid => camImg_data_num_data_valid,
        camImg_data_fifo_cap => camImg_data_fifo_cap,
        camImg_data_full_n => camImg_data_full_n,
        camImg_data_write => Loop_loop_height_proc14_U0_camImg_data_write);

    alpha_add_720_1280_U0 : component add_image_alpha_add_720_1280_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => alpha_add_720_1280_U0_ap_start,
        start_full_n => start_for_Loop_loop_height_proc25_U0_full_n,
        ap_done => alpha_add_720_1280_U0_ap_done,
        ap_continue => alpha_add_720_1280_U0_ap_continue,
        ap_idle => alpha_add_720_1280_U0_ap_idle,
        ap_ready => alpha_add_720_1280_U0_ap_ready,
        start_out => alpha_add_720_1280_U0_start_out,
        start_write => alpha_add_720_1280_U0_start_write,
        srcImg_data_dout => srcImg_data_dout,
        srcImg_data_num_data_valid => srcImg_data_num_data_valid,
        srcImg_data_fifo_cap => srcImg_data_fifo_cap,
        srcImg_data_empty_n => srcImg_data_empty_n,
        srcImg_data_read => alpha_add_720_1280_U0_srcImg_data_read,
        camImg_data_dout => camImg_data_dout,
        camImg_data_num_data_valid => camImg_data_num_data_valid,
        camImg_data_fifo_cap => camImg_data_fifo_cap,
        camImg_data_empty_n => camImg_data_empty_n,
        camImg_data_read => alpha_add_720_1280_U0_camImg_data_read,
        dstImg_data_din => alpha_add_720_1280_U0_dstImg_data_din,
        dstImg_data_num_data_valid => dstImg_data_num_data_valid,
        dstImg_data_fifo_cap => dstImg_data_fifo_cap,
        dstImg_data_full_n => dstImg_data_full_n,
        dstImg_data_write => alpha_add_720_1280_U0_dstImg_data_write,
        alpha_dout => alpha_c_dout,
        alpha_num_data_valid => alpha_c_num_data_valid,
        alpha_fifo_cap => alpha_c_fifo_cap,
        alpha_empty_n => alpha_c_empty_n,
        alpha_read => alpha_add_720_1280_U0_alpha_read);

    Loop_loop_height_proc25_U0 : component add_image_Loop_loop_height_proc25
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_loop_height_proc25_U0_ap_start,
        ap_done => Loop_loop_height_proc25_U0_ap_done,
        ap_continue => Loop_loop_height_proc25_U0_ap_continue,
        ap_idle => Loop_loop_height_proc25_U0_ap_idle,
        ap_ready => Loop_loop_height_proc25_U0_ap_ready,
        dstImg_data_dout => dstImg_data_dout,
        dstImg_data_num_data_valid => dstImg_data_num_data_valid,
        dstImg_data_fifo_cap => dstImg_data_fifo_cap,
        dstImg_data_empty_n => dstImg_data_empty_n,
        dstImg_data_read => Loop_loop_height_proc25_U0_dstImg_data_read,
        OUTPUT_STREAM_TDATA => Loop_loop_height_proc25_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => Loop_loop_height_proc25_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => Loop_loop_height_proc25_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => Loop_loop_height_proc25_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => Loop_loop_height_proc25_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => Loop_loop_height_proc25_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => Loop_loop_height_proc25_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => Loop_loop_height_proc25_U0_OUTPUT_STREAM_TDEST);

    alpha_c_U : component add_image_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_alpha_c_din,
        if_full_n => alpha_c_full_n,
        if_write => entry_proc_U0_alpha_c_write,
        if_dout => alpha_c_dout,
        if_num_data_valid => alpha_c_num_data_valid,
        if_fifo_cap => alpha_c_fifo_cap,
        if_empty_n => alpha_c_empty_n,
        if_read => alpha_add_720_1280_U0_alpha_read);

    srcImg_data_U : component add_image_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_loop_height_proc3_U0_srcImg_data_din,
        if_full_n => srcImg_data_full_n,
        if_write => Loop_loop_height_proc3_U0_srcImg_data_write,
        if_dout => srcImg_data_dout,
        if_num_data_valid => srcImg_data_num_data_valid,
        if_fifo_cap => srcImg_data_fifo_cap,
        if_empty_n => srcImg_data_empty_n,
        if_read => alpha_add_720_1280_U0_srcImg_data_read);

    camImg_data_U : component add_image_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_loop_height_proc14_U0_camImg_data_din,
        if_full_n => camImg_data_full_n,
        if_write => Loop_loop_height_proc14_U0_camImg_data_write,
        if_dout => camImg_data_dout,
        if_num_data_valid => camImg_data_num_data_valid,
        if_fifo_cap => camImg_data_fifo_cap,
        if_empty_n => camImg_data_empty_n,
        if_read => alpha_add_720_1280_U0_camImg_data_read);

    dstImg_data_U : component add_image_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => alpha_add_720_1280_U0_dstImg_data_din,
        if_full_n => dstImg_data_full_n,
        if_write => alpha_add_720_1280_U0_dstImg_data_write,
        if_dout => dstImg_data_dout,
        if_num_data_valid => dstImg_data_num_data_valid,
        if_fifo_cap => dstImg_data_fifo_cap,
        if_empty_n => dstImg_data_empty_n,
        if_read => Loop_loop_height_proc25_U0_dstImg_data_read);

    start_for_alpha_add_720_1280_U0_U : component add_image_start_for_alpha_add_720_1280_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_alpha_add_720_1280_U0_din,
        if_full_n => start_for_alpha_add_720_1280_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_alpha_add_720_1280_U0_dout,
        if_empty_n => start_for_alpha_add_720_1280_U0_empty_n,
        if_read => alpha_add_720_1280_U0_ap_ready);

    start_for_Loop_loop_height_proc25_U0_U : component add_image_start_for_Loop_loop_height_proc25_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_loop_height_proc25_U0_din,
        if_full_n => start_for_Loop_loop_height_proc25_U0_full_n,
        if_write => alpha_add_720_1280_U0_start_write,
        if_dout => start_for_Loop_loop_height_proc25_U0_dout,
        if_empty_n => start_for_Loop_loop_height_proc25_U0_empty_n,
        if_read => Loop_loop_height_proc25_U0_ap_ready);




    CAM_STREAM_TREADY <= Loop_loop_height_proc14_U0_CAM_STREAM_TREADY;
    Loop_loop_height_proc14_U0_ap_continue <= ap_const_logic_1;
    Loop_loop_height_proc14_U0_ap_start <= ap_const_logic_1;
    Loop_loop_height_proc25_U0_ap_continue <= ap_const_logic_1;
    Loop_loop_height_proc25_U0_ap_start <= start_for_Loop_loop_height_proc25_U0_empty_n;
    Loop_loop_height_proc3_U0_ap_continue <= ap_const_logic_1;
    Loop_loop_height_proc3_U0_ap_start <= ap_const_logic_1;
    OUTPUT_STREAM_TDATA <= Loop_loop_height_proc25_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= Loop_loop_height_proc25_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= Loop_loop_height_proc25_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= Loop_loop_height_proc25_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= Loop_loop_height_proc25_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= Loop_loop_height_proc25_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= Loop_loop_height_proc25_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= Loop_loop_height_proc25_U0_OUTPUT_STREAM_TVALID;
    SRC_STREAM_TREADY <= Loop_loop_height_proc3_U0_SRC_STREAM_TREADY;
    alpha_add_720_1280_U0_ap_continue <= ap_const_logic_1;
    alpha_add_720_1280_U0_ap_start <= start_for_alpha_add_720_1280_U0_empty_n;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ap_const_logic_1;
    start_for_Loop_loop_height_proc25_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_alpha_add_720_1280_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
