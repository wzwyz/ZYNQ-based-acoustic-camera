-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_image_Loop_loop_height_proc3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SRC_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    SRC_STREAM_TVALID : IN STD_LOGIC;
    SRC_STREAM_TREADY : OUT STD_LOGIC;
    SRC_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    SRC_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    SRC_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    srcImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    srcImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    srcImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    srcImg_data_full_n : IN STD_LOGIC;
    srcImg_data_write : OUT STD_LOGIC );
end;


architecture behav of add_image_Loop_loop_height_proc3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_load_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_done : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_idle : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_ready : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_srcImg_data_din : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_srcImg_data_write : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_SRC_STREAM_TREADY : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_start_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_start_1_out_ap_vld : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_eol_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_eol_out_ap_vld : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_done : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_idle : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_ready : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_SRC_STREAM_TREADY : STD_LOGIC;
    signal grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal start_fu_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln119_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_62 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal i_2_fu_131_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_data_V_U_apdone_blk : STD_LOGIC;
    signal SRC_STREAM_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal SRC_STREAM_TVALID_int_regslice : STD_LOGIC;
    signal SRC_STREAM_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal SRC_STREAM_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_SRC_STREAM_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal SRC_STREAM_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_SRC_STREAM_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_user_V_U_apdone_blk : STD_LOGIC;
    signal SRC_STREAM_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SRC_STREAM_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_last_V_U_apdone_blk : STD_LOGIC;
    signal SRC_STREAM_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SRC_STREAM_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_id_V_U_apdone_blk : STD_LOGIC;
    signal SRC_STREAM_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SRC_STREAM_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal SRC_STREAM_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SRC_STREAM_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SRC_STREAM_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component add_image_Loop_loop_height_proc3_Pipeline_loop_width IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SRC_STREAM_TVALID : IN STD_LOGIC;
        srcImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        srcImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        srcImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        srcImg_data_full_n : IN STD_LOGIC;
        srcImg_data_write : OUT STD_LOGIC;
        start_r : IN STD_LOGIC_VECTOR (31 downto 0);
        SRC_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        SRC_STREAM_TREADY : OUT STD_LOGIC;
        SRC_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        SRC_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        SRC_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        start_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        start_1_out_ap_vld : OUT STD_LOGIC;
        eol_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        eol_out_ap_vld : OUT STD_LOGIC );
    end component;


    component add_image_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SRC_STREAM_TVALID : IN STD_LOGIC;
        eol_reload : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        SRC_STREAM_TREADY : OUT STD_LOGIC;
        SRC_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        SRC_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        SRC_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        SRC_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component add_image_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70 : component add_image_Loop_loop_height_proc3_Pipeline_loop_width
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start,
        ap_done => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_done,
        ap_idle => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_idle,
        ap_ready => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_ready,
        SRC_STREAM_TVALID => SRC_STREAM_TVALID_int_regslice,
        srcImg_data_din => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_srcImg_data_din,
        srcImg_data_num_data_valid => ap_const_lv3_0,
        srcImg_data_fifo_cap => ap_const_lv3_0,
        srcImg_data_full_n => srcImg_data_full_n,
        srcImg_data_write => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_srcImg_data_write,
        start_r => start_load_reg_172,
        SRC_STREAM_TDATA => SRC_STREAM_TDATA_int_regslice,
        SRC_STREAM_TREADY => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_SRC_STREAM_TREADY,
        SRC_STREAM_TKEEP => SRC_STREAM_TKEEP_int_regslice,
        SRC_STREAM_TSTRB => SRC_STREAM_TSTRB_int_regslice,
        SRC_STREAM_TUSER => SRC_STREAM_TUSER_int_regslice,
        SRC_STREAM_TLAST => SRC_STREAM_TLAST_int_regslice,
        SRC_STREAM_TID => SRC_STREAM_TID_int_regslice,
        SRC_STREAM_TDEST => SRC_STREAM_TDEST_int_regslice,
        start_1_out => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_start_1_out,
        start_1_out_ap_vld => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_start_1_out_ap_vld,
        eol_out => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_eol_out,
        eol_out_ap_vld => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_eol_out_ap_vld);

    grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93 : component add_image_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start,
        ap_done => grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_done,
        ap_idle => grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_idle,
        ap_ready => grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_ready,
        SRC_STREAM_TVALID => SRC_STREAM_TVALID_int_regslice,
        eol_reload => grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_eol_out,
        SRC_STREAM_TDATA => SRC_STREAM_TDATA_int_regslice,
        SRC_STREAM_TREADY => grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_SRC_STREAM_TREADY,
        SRC_STREAM_TKEEP => SRC_STREAM_TKEEP_int_regslice,
        SRC_STREAM_TSTRB => SRC_STREAM_TSTRB_int_regslice,
        SRC_STREAM_TUSER => SRC_STREAM_TUSER_int_regslice,
        SRC_STREAM_TLAST => SRC_STREAM_TLAST_int_regslice,
        SRC_STREAM_TID => SRC_STREAM_TID_int_regslice,
        SRC_STREAM_TDEST => SRC_STREAM_TDEST_int_regslice);

    regslice_both_SRC_STREAM_V_data_V_U : component add_image_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => SRC_STREAM_TDATA,
        vld_in => SRC_STREAM_TVALID,
        ack_in => regslice_both_SRC_STREAM_V_data_V_U_ack_in,
        data_out => SRC_STREAM_TDATA_int_regslice,
        vld_out => SRC_STREAM_TVALID_int_regslice,
        ack_out => SRC_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_SRC_STREAM_V_data_V_U_apdone_blk);

    regslice_both_SRC_STREAM_V_keep_V_U : component add_image_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => SRC_STREAM_TKEEP,
        vld_in => SRC_STREAM_TVALID,
        ack_in => regslice_both_SRC_STREAM_V_keep_V_U_ack_in,
        data_out => SRC_STREAM_TKEEP_int_regslice,
        vld_out => regslice_both_SRC_STREAM_V_keep_V_U_vld_out,
        ack_out => SRC_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_SRC_STREAM_V_keep_V_U_apdone_blk);

    regslice_both_SRC_STREAM_V_strb_V_U : component add_image_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => SRC_STREAM_TSTRB,
        vld_in => SRC_STREAM_TVALID,
        ack_in => regslice_both_SRC_STREAM_V_strb_V_U_ack_in,
        data_out => SRC_STREAM_TSTRB_int_regslice,
        vld_out => regslice_both_SRC_STREAM_V_strb_V_U_vld_out,
        ack_out => SRC_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_SRC_STREAM_V_strb_V_U_apdone_blk);

    regslice_both_SRC_STREAM_V_user_V_U : component add_image_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => SRC_STREAM_TUSER,
        vld_in => SRC_STREAM_TVALID,
        ack_in => regslice_both_SRC_STREAM_V_user_V_U_ack_in,
        data_out => SRC_STREAM_TUSER_int_regslice,
        vld_out => regslice_both_SRC_STREAM_V_user_V_U_vld_out,
        ack_out => SRC_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_SRC_STREAM_V_user_V_U_apdone_blk);

    regslice_both_SRC_STREAM_V_last_V_U : component add_image_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => SRC_STREAM_TLAST,
        vld_in => SRC_STREAM_TVALID,
        ack_in => regslice_both_SRC_STREAM_V_last_V_U_ack_in,
        data_out => SRC_STREAM_TLAST_int_regslice,
        vld_out => regslice_both_SRC_STREAM_V_last_V_U_vld_out,
        ack_out => SRC_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_SRC_STREAM_V_last_V_U_apdone_blk);

    regslice_both_SRC_STREAM_V_id_V_U : component add_image_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => SRC_STREAM_TID,
        vld_in => SRC_STREAM_TVALID,
        ack_in => regslice_both_SRC_STREAM_V_id_V_U_ack_in,
        data_out => SRC_STREAM_TID_int_regslice,
        vld_out => regslice_both_SRC_STREAM_V_id_V_U_vld_out,
        ack_out => SRC_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_SRC_STREAM_V_id_V_U_apdone_blk);

    regslice_both_SRC_STREAM_V_dest_V_U : component add_image_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => SRC_STREAM_TDEST,
        vld_in => SRC_STREAM_TVALID,
        ack_in => regslice_both_SRC_STREAM_V_dest_V_U_ack_in,
        data_out => SRC_STREAM_TDEST_int_regslice,
        vld_out => regslice_both_SRC_STREAM_V_dest_V_U_vld_out,
        ack_out => SRC_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_SRC_STREAM_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_125_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                i_fu_62 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_125_p2 = ap_const_lv1_0))) then 
                i_fu_62 <= i_2_fu_131_p2;
            end if; 
        end if;
    end process;

    start_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                start_fu_58 <= ap_const_lv32_0;
            elsif (((grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_start_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                start_fu_58 <= grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_start_1_out;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                start_load_reg_172 <= start_fu_58;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_done, grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_block_state1, icmp_ln119_fu_125_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_125_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    SRC_STREAM_TREADY <= regslice_both_SRC_STREAM_V_data_V_U_ack_in;

    SRC_STREAM_TREADY_int_regslice_assign_proc : process(grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_SRC_STREAM_TREADY, grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_SRC_STREAM_TREADY, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            SRC_STREAM_TREADY_int_regslice <= grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_SRC_STREAM_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SRC_STREAM_TREADY_int_regslice <= grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_SRC_STREAM_TREADY;
        else 
            SRC_STREAM_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_done)
    begin
        if ((grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_done)
    begin
        if ((grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln119_fu_125_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_125_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln119_fu_125_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_125_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start <= grp_Loop_loop_height_proc3_Pipeline_loop_wait_for_eol_fu_93_ap_start_reg;
    grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start <= grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_ap_start_reg;
    i_2_fu_131_p2 <= std_logic_vector(unsigned(i_fu_62) + unsigned(ap_const_lv10_1));
    icmp_ln119_fu_125_p2 <= "1" when (i_fu_62 = ap_const_lv10_2D0) else "0";
    srcImg_data_din <= grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_srcImg_data_din;

    srcImg_data_write_assign_proc : process(grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_srcImg_data_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            srcImg_data_write <= grp_Loop_loop_height_proc3_Pipeline_loop_width_fu_70_srcImg_data_write;
        else 
            srcImg_data_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
