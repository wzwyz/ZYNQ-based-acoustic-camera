-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_image_Loop_loop_height_proc3_Pipeline_loop_width is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SRC_STREAM_TVALID : IN STD_LOGIC;
    srcImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    srcImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    srcImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    srcImg_data_full_n : IN STD_LOGIC;
    srcImg_data_write : OUT STD_LOGIC;
    start_r : IN STD_LOGIC_VECTOR (31 downto 0);
    SRC_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    SRC_STREAM_TREADY : OUT STD_LOGIC;
    SRC_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    SRC_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    SRC_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    SRC_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    start_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    start_1_out_ap_vld : OUT STD_LOGIC;
    eol_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    eol_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of add_image_Loop_loop_height_proc3_Pipeline_loop_width is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln122_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln122_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln131_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op48_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal SRC_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal srcImg_data_blk_n : STD_LOGIC;
    signal eol_reg_108 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal axi_data_reg_256 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln131_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_start_2_phi_fu_123_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_start_2_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_start_3_phi_fu_133_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_start_3_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_4_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_6_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_j_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_1_fu_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal srcImg_data_write_local : STD_LOGIC;
    signal icmp_ln131_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln131_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_282 : BOOLEAN;
    signal ap_condition_287 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component add_image_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component add_image_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    eol_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_282)) then 
                    eol_reg_108 <= SRC_STREAM_TLAST;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    eol_reg_108 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_62 <= ap_const_lv32_0;
                elsif (((icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_62 <= j_6_fu_214_p2;
                elsif ((ap_const_boolean_1 = ap_condition_287)) then 
                    j_fu_62 <= j_4_fu_200_p2;
                end if;
            end if; 
        end if;
    end process;

    start_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    start_1_fu_66 <= start_r;
                elsif (((icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    start_1_fu_66 <= ap_phi_mux_start_3_phi_fu_133_p4;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axi_data_reg_256 <= SRC_STREAM_TDATA;
                icmp_ln122_reg_252 <= icmp_ln122_fu_158_p2;
                or_ln131_reg_266 <= or_ln131_fu_188_p2;
                or_ln134_reg_270 <= or_ln134_fu_194_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    SRC_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, SRC_STREAM_TVALID, icmp_ln122_fu_158_p2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SRC_STREAM_TDATA_blk_n <= SRC_STREAM_TVALID;
        else 
            SRC_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    SRC_STREAM_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln122_fu_158_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SRC_STREAM_TREADY <= ap_const_logic_1;
        else 
            SRC_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(SRC_STREAM_TVALID, icmp_ln122_fu_158_p2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_0 = SRC_STREAM_TVALID));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(srcImg_data_full_n, ap_predicate_op48_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op48_write_state3 = ap_const_boolean_1) and (srcImg_data_full_n = ap_const_logic_0));
    end process;


    ap_condition_282_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln122_fu_158_p2, ap_block_pp0_stage0_11001)
    begin
                ap_condition_282 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_287_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln122_fu_158_p2, or_ln131_fu_188_p2, or_ln134_fu_194_p2)
    begin
                ap_condition_287 <= ((icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (or_ln134_fu_194_p2 = ap_const_lv1_0) and (or_ln131_fu_188_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln122_fu_158_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln122_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_start_2_phi_fu_123_p4_assign_proc : process(icmp_ln122_fu_158_p2, or_ln131_fu_188_p2, or_ln134_fu_194_p2, ap_phi_reg_pp0_iter1_start_2_reg_120, start_1_fu_66)
    begin
        if ((icmp_ln122_fu_158_p2 = ap_const_lv1_1)) then
            if ((or_ln131_fu_188_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_start_2_phi_fu_123_p4 <= ap_const_lv32_1;
            elsif (((or_ln134_fu_194_p2 = ap_const_lv1_1) and (or_ln131_fu_188_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_start_2_phi_fu_123_p4 <= start_1_fu_66;
            else 
                ap_phi_mux_start_2_phi_fu_123_p4 <= ap_phi_reg_pp0_iter1_start_2_reg_120;
            end if;
        else 
            ap_phi_mux_start_2_phi_fu_123_p4 <= ap_phi_reg_pp0_iter1_start_2_reg_120;
        end if; 
    end process;


    ap_phi_mux_start_3_phi_fu_133_p4_assign_proc : process(icmp_ln122_fu_158_p2, or_ln131_fu_188_p2, or_ln134_fu_194_p2, ap_phi_mux_start_2_phi_fu_123_p4, ap_phi_reg_pp0_iter1_start_3_reg_130)
    begin
        if (((icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (or_ln134_fu_194_p2 = ap_const_lv1_0) and (or_ln131_fu_188_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_start_3_phi_fu_133_p4 <= ap_const_lv32_0;
        elsif ((((icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (or_ln131_fu_188_p2 = ap_const_lv1_0)) or ((icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (or_ln134_fu_194_p2 = ap_const_lv1_1)))) then 
            ap_phi_mux_start_3_phi_fu_133_p4 <= ap_phi_mux_start_2_phi_fu_123_p4;
        else 
            ap_phi_mux_start_3_phi_fu_133_p4 <= ap_phi_reg_pp0_iter1_start_3_reg_130;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_start_2_reg_120 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_start_3_reg_130 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op48_write_state3_assign_proc : process(icmp_ln122_reg_252, or_ln134_reg_270, or_ln131_reg_266)
    begin
                ap_predicate_op48_write_state3 <= (((or_ln131_reg_266 = ap_const_lv1_0) and (icmp_ln122_reg_252 = ap_const_lv1_1)) or ((or_ln134_reg_270 = ap_const_lv1_1) and (icmp_ln122_reg_252 = ap_const_lv1_1)));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln122_fu_158_p2, ap_block_pp0_stage0, or_ln131_fu_188_p2, or_ln134_fu_194_p2, j_fu_62, j_4_fu_200_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln122_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln134_fu_194_p2 = ap_const_lv1_0) and (or_ln131_fu_188_p2 = ap_const_lv1_1))) then 
            ap_sig_allocacmp_j_5 <= j_4_fu_200_p2;
        else 
            ap_sig_allocacmp_j_5 <= j_fu_62;
        end if; 
    end process;

    eol_out <= eol_reg_108;

    eol_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln122_fu_158_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln122_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            eol_out_ap_vld <= ap_const_logic_1;
        else 
            eol_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln122_fu_158_p2 <= "1" when (signed(j_fu_62) < signed(ap_const_lv32_500)) else "0";
    icmp_ln131_fu_176_p2 <= "0" when (start_1_fu_66 = ap_const_lv32_0) else "1";
    j_4_fu_200_p2 <= std_logic_vector(unsigned(j_fu_62) + unsigned(ap_const_lv32_FFFFFFFF));
    j_6_fu_214_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_5) + unsigned(ap_const_lv32_1));
    or_ln131_fu_188_p2 <= (xor_ln131_fu_182_p2 or icmp_ln131_fu_176_p2);
    or_ln134_fu_194_p2 <= (icmp_ln131_fu_176_p2 or SRC_STREAM_TUSER);

    srcImg_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, srcImg_data_full_n, ap_predicate_op48_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op48_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcImg_data_blk_n <= srcImg_data_full_n;
        else 
            srcImg_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    srcImg_data_din <= axi_data_reg_256;
    srcImg_data_write <= srcImg_data_write_local;

    srcImg_data_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op48_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op48_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcImg_data_write_local <= ap_const_logic_1;
        else 
            srcImg_data_write_local <= ap_const_logic_0;
        end if; 
    end process;

    start_1_out <= start_1_fu_66;

    start_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln122_fu_158_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln122_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            start_1_out_ap_vld <= ap_const_logic_1;
        else 
            start_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln131_fu_182_p2 <= (ap_const_lv1_1 xor SRC_STREAM_TUSER);
end behav;
