-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_image_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    srcImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    srcImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    srcImg_data_empty_n : IN STD_LOGIC;
    srcImg_data_read : OUT STD_LOGIC;
    camImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    camImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    camImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    camImg_data_empty_n : IN STD_LOGIC;
    camImg_data_read : OUT STD_LOGIC;
    dstImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    dstImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    dstImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    dstImg_data_full_n : IN STD_LOGIC;
    dstImg_data_write : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (15 downto 0);
    sub : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of add_image_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv20_E0FFF : STD_LOGIC_VECTOR (19 downto 0) := "11100000111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln45_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal srcImg_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal camImg_data_blk_n : STD_LOGIC;
    signal dstImg_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cam_B_fu_125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cam_B_reg_288 : STD_LOGIC_VECTOR (7 downto 0);
    signal cam_B_reg_288_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal cam_G_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal cam_G_reg_293_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal cam_R_reg_298 : STD_LOGIC_VECTOR (7 downto 0);
    signal cam_R_reg_298_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_1_fu_181_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln63_1_fu_189_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln64_1_fu_197_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten2_fu_58 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal add_ln45_fu_161_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvar_flatten2_load : STD_LOGIC_VECTOR (19 downto 0);
    signal srcImg_data_read_local : STD_LOGIC;
    signal camImg_data_read_local : STD_LOGIC;
    signal dst_data_fu_229_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal dstImg_data_write_local : STD_LOGIC;
    signal src_B_fu_101_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_G_fu_105_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_R_fu_115_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_1_fu_181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln63_1_fu_189_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln64_1_fu_197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_B_fu_202_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_240_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_G_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_249_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_R_fu_220_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_258_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_R_fu_220_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_G_fu_211_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_B_fu_202_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_249_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_249_ce : STD_LOGIC;
    signal grp_fu_258_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_240_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_249_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_258_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_1_fu_181_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln63_1_fu_189_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln64_1_fu_197_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component add_image_mul_16s_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component add_image_mac_muladd_16s_8ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component add_image_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_8ns_16_1_1_U71 : component add_image_mul_16s_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => sub,
        din1 => mul_ln62_1_fu_181_p1,
        dout => mul_ln62_1_fu_181_p2);

    mul_16s_8ns_16_1_1_U72 : component add_image_mul_16s_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => sub,
        din1 => mul_ln63_1_fu_189_p1,
        dout => mul_ln63_1_fu_189_p2);

    mul_16s_8ns_16_1_1_U73 : component add_image_mul_16s_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => sub,
        din1 => mul_ln64_1_fu_197_p1,
        dout => mul_ln64_1_fu_197_p2);

    mac_muladd_16s_8ns_16ns_16_4_1_U74 : component add_image_mac_muladd_16s_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty,
        din1 => grp_fu_240_p1,
        din2 => mul_ln62_1_fu_181_p2,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p3);

    mac_muladd_16s_8ns_16ns_16_4_1_U75 : component add_image_mac_muladd_16s_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty,
        din1 => grp_fu_249_p1,
        din2 => mul_ln63_1_fu_189_p2,
        ce => grp_fu_249_ce,
        dout => grp_fu_249_p3);

    mac_muladd_16s_8ns_16ns_16_4_1_U76 : component add_image_mac_muladd_16s_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty,
        din1 => grp_fu_258_p1,
        din2 => mul_ln64_1_fu_197_p2,
        ce => grp_fu_258_ce,
        dout => grp_fu_258_p3);

    flow_control_loop_pipe_sequential_init_U : component add_image_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    indvar_flatten2_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_start_int = ap_const_logic_1)) then 
                    indvar_flatten2_fu_58 <= add_ln45_fu_161_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten2_fu_58 <= ap_const_lv20_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                cam_B_reg_288 <= cam_B_fu_125_p1;
                cam_B_reg_288_pp0_iter1_reg <= cam_B_reg_288;
                cam_G_reg_293 <= camImg_data_dout(15 downto 8);
                cam_G_reg_293_pp0_iter1_reg <= cam_G_reg_293;
                cam_R_reg_298 <= camImg_data_dout(23 downto 16);
                cam_R_reg_298_pp0_iter1_reg <= cam_R_reg_298;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln45_fu_161_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten2_load) + unsigned(ap_const_lv20_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(srcImg_data_empty_n, camImg_data_empty_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((camImg_data_empty_n = ap_const_logic_0) or (srcImg_data_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(dstImg_data_full_n)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (dstImg_data_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln45_fu_167_p2, ap_start_int)
    begin
        if (((icmp_ln45_fu_167_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten2_fu_58, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten2_load <= ap_const_lv20_0;
        else 
            ap_sig_allocacmp_indvar_flatten2_load <= indvar_flatten2_fu_58;
        end if; 
    end process;


    camImg_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, camImg_data_empty_n, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            camImg_data_blk_n <= camImg_data_empty_n;
        else 
            camImg_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    camImg_data_read <= camImg_data_read_local;

    camImg_data_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            camImg_data_read_local <= ap_const_logic_1;
        else 
            camImg_data_read_local <= ap_const_logic_0;
        end if; 
    end process;

    cam_B_fu_125_p1 <= camImg_data_dout(8 - 1 downto 0);

    dstImg_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, dstImg_data_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dstImg_data_blk_n <= dstImg_data_full_n;
        else 
            dstImg_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dstImg_data_din <= dst_data_fu_229_p4;
    dstImg_data_write <= dstImg_data_write_local;

    dstImg_data_write_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dstImg_data_write_local <= ap_const_logic_1;
        else 
            dstImg_data_write_local <= ap_const_logic_0;
        end if; 
    end process;

    dst_B_fu_202_p1 <= grp_fu_240_p3;
    dst_B_fu_202_p4 <= dst_B_fu_202_p1(15 downto 8);
    dst_G_fu_211_p1 <= grp_fu_249_p3;
    dst_G_fu_211_p4 <= dst_G_fu_211_p1(15 downto 8);
    dst_R_fu_220_p1 <= grp_fu_258_p3;
    dst_R_fu_220_p4 <= dst_R_fu_220_p1(15 downto 8);
    dst_data_fu_229_p4 <= ((dst_R_fu_220_p4 & dst_G_fu_211_p4) & dst_B_fu_202_p4);

    grp_fu_240_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_240_ce <= ap_const_logic_1;
        else 
            grp_fu_240_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_240_p1 <= grp_fu_240_p10(8 - 1 downto 0);
    grp_fu_240_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_B_fu_101_p1),16));

    grp_fu_249_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_249_ce <= ap_const_logic_1;
        else 
            grp_fu_249_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_249_p1 <= grp_fu_249_p10(8 - 1 downto 0);
    grp_fu_249_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_G_fu_105_p4),16));

    grp_fu_258_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_258_ce <= ap_const_logic_1;
        else 
            grp_fu_258_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_258_p1 <= grp_fu_258_p10(8 - 1 downto 0);
    grp_fu_258_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_R_fu_115_p4),16));
    icmp_ln45_fu_167_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten2_load = ap_const_lv20_E0FFF) else "0";
    mul_ln62_1_fu_181_p1 <= mul_ln62_1_fu_181_p10(8 - 1 downto 0);
    mul_ln62_1_fu_181_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cam_B_reg_288_pp0_iter1_reg),16));
    mul_ln63_1_fu_189_p1 <= mul_ln63_1_fu_189_p10(8 - 1 downto 0);
    mul_ln63_1_fu_189_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cam_G_reg_293_pp0_iter1_reg),16));
    mul_ln64_1_fu_197_p1 <= mul_ln64_1_fu_197_p10(8 - 1 downto 0);
    mul_ln64_1_fu_197_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cam_R_reg_298_pp0_iter1_reg),16));

    srcImg_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, srcImg_data_empty_n, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcImg_data_blk_n <= srcImg_data_empty_n;
        else 
            srcImg_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    srcImg_data_read <= srcImg_data_read_local;

    srcImg_data_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcImg_data_read_local <= ap_const_logic_1;
        else 
            srcImg_data_read_local <= ap_const_logic_0;
        end if; 
    end process;

    src_B_fu_101_p1 <= srcImg_data_dout(8 - 1 downto 0);
    src_G_fu_105_p4 <= srcImg_data_dout(15 downto 8);
    src_R_fu_115_p4 <= srcImg_data_dout(23 downto 16);
end behav;
