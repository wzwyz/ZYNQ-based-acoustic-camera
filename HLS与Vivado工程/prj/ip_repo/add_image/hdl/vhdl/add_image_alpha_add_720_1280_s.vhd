-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_image_alpha_add_720_1280_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    srcImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    srcImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    srcImg_data_empty_n : IN STD_LOGIC;
    srcImg_data_read : OUT STD_LOGIC;
    camImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    camImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    camImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    camImg_data_empty_n : IN STD_LOGIC;
    camImg_data_read : OUT STD_LOGIC;
    dstImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    dstImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    dstImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    dstImg_data_full_n : IN STD_LOGIC;
    dstImg_data_write : OUT STD_LOGIC;
    alpha_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    alpha_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    alpha_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    alpha_empty_n : IN STD_LOGIC;
    alpha_read : OUT STD_LOGIC );
end;


architecture behav of add_image_alpha_add_720_1280_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal alpha_blk_n : STD_LOGIC;
    signal empty_fu_54_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sub_fu_58_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_reg_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start : STD_LOGIC;
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done : STD_LOGIC;
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_idle : STD_LOGIC;
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_ready : STD_LOGIC;
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_srcImg_data_read : STD_LOGIC;
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_camImg_data_read : STD_LOGIC;
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_din : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_write : STD_LOGIC;
    signal grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal alpha_read_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component add_image_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        srcImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        srcImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        srcImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        srcImg_data_empty_n : IN STD_LOGIC;
        srcImg_data_read : OUT STD_LOGIC;
        camImg_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        camImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        camImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        camImg_data_empty_n : IN STD_LOGIC;
        camImg_data_read : OUT STD_LOGIC;
        dstImg_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        dstImg_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        dstImg_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        dstImg_data_full_n : IN STD_LOGIC;
        dstImg_data_write : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (15 downto 0);
        sub : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42 : component add_image_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start,
        ap_done => grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done,
        ap_idle => grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_idle,
        ap_ready => grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_ready,
        srcImg_data_dout => srcImg_data_dout,
        srcImg_data_num_data_valid => ap_const_lv3_0,
        srcImg_data_fifo_cap => ap_const_lv3_0,
        srcImg_data_empty_n => srcImg_data_empty_n,
        srcImg_data_read => grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_srcImg_data_read,
        camImg_data_dout => camImg_data_dout,
        camImg_data_num_data_valid => ap_const_lv3_0,
        camImg_data_fifo_cap => ap_const_lv3_0,
        camImg_data_empty_n => camImg_data_empty_n,
        camImg_data_read => grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_camImg_data_read,
        dstImg_data_din => grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_din,
        dstImg_data_num_data_valid => ap_const_lv3_0,
        dstImg_data_fifo_cap => ap_const_lv3_0,
        dstImg_data_full_n => dstImg_data_full_n,
        dstImg_data_write => grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_write,
        empty => empty_reg_64,
        sub => sub_reg_70);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_ready = ap_const_logic_1)) then 
                    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_64 <= empty_fu_54_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sub_reg_70 <= sub_fu_58_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    alpha_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, alpha_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alpha_blk_n <= alpha_empty_n;
        else 
            alpha_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    alpha_read <= alpha_read_local;

    alpha_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alpha_read_local <= ap_const_logic_1;
        else 
            alpha_read_local <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done)
    begin
        if ((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, alpha_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    camImg_data_read_assign_proc : process(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_camImg_data_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            camImg_data_read <= grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_camImg_data_read;
        else 
            camImg_data_read <= ap_const_logic_0;
        end if; 
    end process;

    dstImg_data_din <= grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_din;

    dstImg_data_write_assign_proc : process(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dstImg_data_write <= grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_dstImg_data_write;
        else 
            dstImg_data_write <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_54_p1 <= alpha_dout(16 - 1 downto 0);
    grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start <= grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_start_reg;

    internal_ap_ready_assign_proc : process(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    srcImg_data_read_assign_proc : process(grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_srcImg_data_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            srcImg_data_read <= grp_alpha_add_720_1280_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_47_2_fu_42_srcImg_data_read;
        else 
            srcImg_data_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_fu_58_p2 <= std_logic_vector(unsigned(ap_const_lv16_FF) - unsigned(empty_reg_64));
end behav;
