// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_mapping_color_mapping,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=13.468000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=9.211500,HLS_SYN_LAT=21,HLS_SYN_TPT=1,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=2749,HLS_SYN_LUT=3340,HLS_VERSION=2024_1}" *)

module color_mapping (
        ap_clk,
        ap_rst_n,
        val_r,
        jet_rgb,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] val_r;
output  [23:0] jet_rgb;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] red_start;
wire   [31:0] orange_start;
wire   [31:0] green_start;
wire   [31:0] cyan_start;
wire   [31:0] blue_start;
wire   [31:0] thres_low;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] grp_fu_185_p1;
reg   [31:0] x_assign_reg_708;
wire   [31:0] grp_log_generic_float_s_fu_165_ap_return;
reg   [31:0] tmp_reg_713;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] gray_reg_718;
wire   [0:0] or_ln34_fu_290_p2;
reg   [0:0] or_ln34_reg_767;
wire   [0:0] icmp_ln34_2_fu_296_p2;
reg   [0:0] icmp_ln34_2_reg_773;
wire   [0:0] icmp_ln34_3_fu_302_p2;
reg   [0:0] icmp_ln34_3_reg_778;
wire   [0:0] and_ln34_3_fu_344_p2;
reg   [0:0] and_ln34_3_reg_783;
wire   [0:0] and_ln37_2_fu_386_p2;
reg   [0:0] and_ln37_2_reg_789;
wire   [0:0] and_ln40_2_fu_428_p2;
reg   [0:0] and_ln40_2_reg_795;
wire   [0:0] and_ln43_1_fu_470_p2;
reg   [0:0] and_ln43_1_reg_801;
wire   [0:0] icmp_ln46_fu_494_p2;
reg   [0:0] icmp_ln46_reg_807;
wire   [0:0] icmp_ln46_1_fu_500_p2;
reg   [0:0] icmp_ln46_1_reg_812;
reg    grp_log_generic_float_s_fu_165_ap_ce;
wire    ap_block_pp0_stage0_11001_ignoreCallOp29;
wire    ap_block_pp0_stage0_ignoreCallOp29;
wire   [23:0] storemerge4_fu_674_p13;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage0;
wire   [31:0] grp_fu_185_p0;
wire   [31:0] bitcast_ln34_fu_243_p1;
wire   [31:0] bitcast_ln34_1_fu_260_p1;
wire   [7:0] tmp_1_fu_246_p4;
wire   [22:0] trunc_ln34_fu_256_p1;
wire   [0:0] icmp_ln34_1_fu_284_p2;
wire   [0:0] icmp_ln34_fu_278_p2;
wire   [7:0] tmp_2_fu_264_p4;
wire   [22:0] trunc_ln34_1_fu_274_p1;
wire   [31:0] bitcast_ln34_2_fu_308_p1;
wire   [7:0] tmp_5_fu_312_p4;
wire   [22:0] trunc_ln34_2_fu_322_p1;
wire   [0:0] icmp_ln34_5_fu_332_p2;
wire   [0:0] icmp_ln34_4_fu_326_p2;
wire   [0:0] or_ln34_2_fu_338_p2;
wire   [31:0] bitcast_ln37_fu_350_p1;
wire   [7:0] tmp_s_fu_354_p4;
wire   [22:0] trunc_ln37_fu_364_p1;
wire   [0:0] icmp_ln37_1_fu_374_p2;
wire   [0:0] icmp_ln37_fu_368_p2;
wire   [0:0] or_ln37_fu_380_p2;
wire   [31:0] bitcast_ln40_fu_392_p1;
wire   [7:0] tmp_10_fu_396_p4;
wire   [22:0] trunc_ln40_fu_406_p1;
wire   [0:0] icmp_ln40_1_fu_416_p2;
wire   [0:0] icmp_ln40_fu_410_p2;
wire   [0:0] or_ln40_fu_422_p2;
wire   [31:0] bitcast_ln43_fu_434_p1;
wire   [7:0] tmp_13_fu_438_p4;
wire   [22:0] trunc_ln43_fu_448_p1;
wire   [0:0] icmp_ln43_1_fu_458_p2;
wire   [0:0] icmp_ln43_fu_452_p2;
wire   [0:0] or_ln43_fu_464_p2;
wire   [31:0] bitcast_ln46_fu_476_p1;
wire   [7:0] tmp_16_fu_480_p4;
wire   [22:0] trunc_ln46_fu_490_p1;
wire   [0:0] or_ln34_1_fu_506_p2;
wire   [0:0] and_ln34_1_fu_510_p2;
wire   [0:0] grp_fu_188_p2;
wire   [0:0] grp_fu_193_p2;
wire   [0:0] and_ln34_2_fu_515_p2;
wire   [0:0] and_ln34_4_fu_521_p2;
wire   [0:0] grp_fu_198_p2;
wire   [0:0] grp_fu_203_p2;
wire   [0:0] and_ln37_1_fu_532_p2;
wire   [0:0] and_ln37_3_fu_537_p2;
wire   [0:0] grp_fu_208_p2;
wire   [0:0] grp_fu_213_p2;
wire   [0:0] and_ln40_1_fu_548_p2;
wire   [0:0] and_ln40_3_fu_553_p2;
wire   [0:0] grp_fu_218_p2;
wire   [0:0] grp_fu_223_p2;
wire   [0:0] grp_fu_228_p2;
wire   [0:0] or_ln46_fu_579_p2;
wire   [0:0] and_ln46_2_fu_583_p2;
wire   [0:0] grp_fu_233_p2;
wire   [0:0] and_ln46_1_fu_574_p2;
wire   [0:0] and_ln46_3_fu_588_p2;
wire   [0:0] and_ln46_fu_594_p2;
wire   [0:0] and_ln34_fu_526_p2;
wire   [0:0] and_ln37_fu_542_p2;
wire   [0:0] xor_ln34_fu_608_p2;
wire   [0:0] or_ln37_1_fu_620_p2;
wire   [0:0] and_ln40_fu_558_p2;
wire   [0:0] xor_ln37_fu_626_p2;
wire   [0:0] or_ln40_1_fu_638_p2;
wire   [0:0] and_ln43_2_fu_569_p2;
wire   [0:0] xor_ln40_fu_644_p2;
wire   [0:0] and_ln43_3_fu_650_p2;
wire   [0:0] and_ln43_fu_564_p2;
wire   [0:0] and_ln37_4_fu_614_p2;
wire   [0:0] and_ln40_4_fu_632_p2;
wire   [0:0] and_ln43_4_fu_656_p2;
wire   [23:0] storemerge4_fu_674_p10;
wire   [23:0] storemerge4_fu_674_p11;
wire   [3:0] storemerge4_fu_674_p12;
wire    ap_block_pp0_stage0_00001;
wire  signed [3:0] storemerge4_fu_674_p1;
wire   [3:0] storemerge4_fu_674_p3;
wire   [3:0] storemerge4_fu_674_p5;
wire   [3:0] storemerge4_fu_674_p7;
wire   [3:0] storemerge4_fu_674_p9;
wire    ap_ce_reg;

color_mapping_log_generic_float_s grp_log_generic_float_s_fu_165(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .base_r(x_assign_reg_708),
    .ap_return(grp_log_generic_float_s_fu_165_ap_return),
    .ap_ce(grp_log_generic_float_s_fu_165_ap_ce)
);

color_mapping_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .red_start(red_start),
    .orange_start(orange_start),
    .green_start(green_start),
    .cyan_start(cyan_start),
    .blue_start(blue_start),
    .thres_low(thres_low)
);

color_mapping_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_713),
    .din1(32'd1069066811),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

color_mapping_uitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_4_no_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_185_p0),
    .ce(1'b1),
    .dout(grp_fu_185_p1)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(red_start),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_188_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(orange_start),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_193_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(orange_start),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_198_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(green_start),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_203_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(green_start),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_208_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(cyan_start),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_213_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(cyan_start),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_218_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(blue_start),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_223_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(blue_start),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_228_p2)
);

color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gray_reg_718),
    .din1(thres_low),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_233_p2)
);

(* dissolve_hierarchy = "yes" *) color_mapping_sparsemux_11_4_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h8 ),
    .din0_WIDTH( 24 ),
    .CASE1( 4'h4 ),
    .din1_WIDTH( 24 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 24 ),
    .CASE3( 4'h1 ),
    .din3_WIDTH( 24 ),
    .CASE4( 4'h0 ),
    .din4_WIDTH( 24 ),
    .def_WIDTH( 24 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 24 ))
sparsemux_11_4_24_1_1_U31(
    .din0(24'd16720896),
    .din1(24'd16744192),
    .din2(24'd65408),
    .din3(24'd4251856),
    .din4(storemerge4_fu_674_p10),
    .def(storemerge4_fu_674_p11),
    .sel(storemerge4_fu_674_p12),
    .dout(storemerge4_fu_674_p13)
);

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln34_3_reg_783 <= and_ln34_3_fu_344_p2;
        and_ln37_2_reg_789 <= and_ln37_2_fu_386_p2;
        and_ln40_2_reg_795 <= and_ln40_2_fu_428_p2;
        and_ln43_1_reg_801 <= and_ln43_1_fu_470_p2;
        gray_reg_718 <= grp_fu_180_p2;
        icmp_ln34_2_reg_773 <= icmp_ln34_2_fu_296_p2;
        icmp_ln34_3_reg_778 <= icmp_ln34_3_fu_302_p2;
        icmp_ln46_1_reg_812 <= icmp_ln46_1_fu_500_p2;
        icmp_ln46_reg_807 <= icmp_ln46_fu_494_p2;
        or_ln34_reg_767 <= or_ln34_fu_290_p2;
        tmp_reg_713 <= grp_log_generic_float_s_fu_165_ap_return;
        x_assign_reg_708 <= grp_fu_185_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp29)) begin
        grp_log_generic_float_s_fu_165_ap_ce = 1'b1;
    end else begin
        grp_log_generic_float_s_fu_165_ap_ce = 1'b0;
    end
end

assign and_ln34_1_fu_510_p2 = (or_ln34_reg_767 & or_ln34_1_fu_506_p2);

assign and_ln34_2_fu_515_p2 = (grp_fu_188_p2 & and_ln34_1_fu_510_p2);

assign and_ln34_3_fu_344_p2 = (or_ln34_fu_290_p2 & or_ln34_2_fu_338_p2);

assign and_ln34_4_fu_521_p2 = (grp_fu_193_p2 & and_ln34_3_reg_783);

assign and_ln34_fu_526_p2 = (and_ln34_4_fu_521_p2 & and_ln34_2_fu_515_p2);

assign and_ln37_1_fu_532_p2 = (grp_fu_198_p2 & and_ln34_3_reg_783);

assign and_ln37_2_fu_386_p2 = (or_ln37_fu_380_p2 & or_ln34_fu_290_p2);

assign and_ln37_3_fu_537_p2 = (grp_fu_203_p2 & and_ln37_2_reg_789);

assign and_ln37_4_fu_614_p2 = (xor_ln34_fu_608_p2 & and_ln37_fu_542_p2);

assign and_ln37_fu_542_p2 = (and_ln37_3_fu_537_p2 & and_ln37_1_fu_532_p2);

assign and_ln40_1_fu_548_p2 = (grp_fu_208_p2 & and_ln37_2_reg_789);

assign and_ln40_2_fu_428_p2 = (or_ln40_fu_422_p2 & or_ln34_fu_290_p2);

assign and_ln40_3_fu_553_p2 = (grp_fu_213_p2 & and_ln40_2_reg_795);

assign and_ln40_4_fu_632_p2 = (xor_ln37_fu_626_p2 & and_ln40_fu_558_p2);

assign and_ln40_fu_558_p2 = (and_ln40_3_fu_553_p2 & and_ln40_1_fu_548_p2);

assign and_ln43_1_fu_470_p2 = (or_ln43_fu_464_p2 & or_ln34_fu_290_p2);

assign and_ln43_2_fu_569_p2 = (grp_fu_223_p2 & and_ln43_1_reg_801);

assign and_ln43_3_fu_650_p2 = (xor_ln40_fu_644_p2 & and_ln43_2_fu_569_p2);

assign and_ln43_4_fu_656_p2 = (and_ln43_fu_564_p2 & and_ln43_3_fu_650_p2);

assign and_ln43_fu_564_p2 = (grp_fu_218_p2 & and_ln40_2_reg_795);

assign and_ln46_1_fu_574_p2 = (grp_fu_228_p2 & and_ln43_1_reg_801);

assign and_ln46_2_fu_583_p2 = (or_ln46_fu_579_p2 & or_ln34_reg_767);

assign and_ln46_3_fu_588_p2 = (grp_fu_233_p2 & and_ln46_2_fu_583_p2);

assign and_ln46_fu_594_p2 = (and_ln46_3_fu_588_p2 & and_ln46_1_fu_574_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp29 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp29 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln34_1_fu_260_p1 = red_start;

assign bitcast_ln34_2_fu_308_p1 = orange_start;

assign bitcast_ln34_fu_243_p1 = gray_reg_718;

assign bitcast_ln37_fu_350_p1 = green_start;

assign bitcast_ln40_fu_392_p1 = cyan_start;

assign bitcast_ln43_fu_434_p1 = blue_start;

assign bitcast_ln46_fu_476_p1 = thres_low;

assign grp_fu_185_p0 = val_r;

assign icmp_ln34_1_fu_284_p2 = ((trunc_ln34_fu_256_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_296_p2 = ((tmp_2_fu_264_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln34_3_fu_302_p2 = ((trunc_ln34_1_fu_274_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_4_fu_326_p2 = ((tmp_5_fu_312_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln34_5_fu_332_p2 = ((trunc_ln34_2_fu_322_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_278_p2 = ((tmp_1_fu_246_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln37_1_fu_374_p2 = ((trunc_ln37_fu_364_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_368_p2 = ((tmp_s_fu_354_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_416_p2 = ((trunc_ln40_fu_406_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_410_p2 = ((tmp_10_fu_396_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_458_p2 = ((trunc_ln43_fu_448_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_452_p2 = ((tmp_13_fu_438_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_500_p2 = ((trunc_ln46_fu_490_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_494_p2 = ((tmp_16_fu_480_p4 != 8'd255) ? 1'b1 : 1'b0);

assign jet_rgb = storemerge4_fu_674_p13;

assign or_ln34_1_fu_506_p2 = (icmp_ln34_3_reg_778 | icmp_ln34_2_reg_773);

assign or_ln34_2_fu_338_p2 = (icmp_ln34_5_fu_332_p2 | icmp_ln34_4_fu_326_p2);

assign or_ln34_fu_290_p2 = (icmp_ln34_fu_278_p2 | icmp_ln34_1_fu_284_p2);

assign or_ln37_1_fu_620_p2 = (and_ln37_fu_542_p2 | and_ln34_fu_526_p2);

assign or_ln37_fu_380_p2 = (icmp_ln37_fu_368_p2 | icmp_ln37_1_fu_374_p2);

assign or_ln40_1_fu_638_p2 = (or_ln37_1_fu_620_p2 | and_ln40_fu_558_p2);

assign or_ln40_fu_422_p2 = (icmp_ln40_fu_410_p2 | icmp_ln40_1_fu_416_p2);

assign or_ln43_fu_464_p2 = (icmp_ln43_fu_452_p2 | icmp_ln43_1_fu_458_p2);

assign or_ln46_fu_579_p2 = (icmp_ln46_reg_807 | icmp_ln46_1_reg_812);

assign storemerge4_fu_674_p10 = ((and_ln46_fu_594_p2[0:0] == 1'b1) ? 24'd18346 : 24'd0);

assign storemerge4_fu_674_p11 = 'bx;

assign storemerge4_fu_674_p12 = {{{{and_ln34_fu_526_p2}, {and_ln37_4_fu_614_p2}}, {and_ln40_4_fu_632_p2}}, {and_ln43_4_fu_656_p2}};

assign tmp_10_fu_396_p4 = {{bitcast_ln40_fu_392_p1[30:23]}};

assign tmp_13_fu_438_p4 = {{bitcast_ln43_fu_434_p1[30:23]}};

assign tmp_16_fu_480_p4 = {{bitcast_ln46_fu_476_p1[30:23]}};

assign tmp_1_fu_246_p4 = {{bitcast_ln34_fu_243_p1[30:23]}};

assign tmp_2_fu_264_p4 = {{bitcast_ln34_1_fu_260_p1[30:23]}};

assign tmp_5_fu_312_p4 = {{bitcast_ln34_2_fu_308_p1[30:23]}};

assign tmp_s_fu_354_p4 = {{bitcast_ln37_fu_350_p1[30:23]}};

assign trunc_ln34_1_fu_274_p1 = bitcast_ln34_1_fu_260_p1[22:0];

assign trunc_ln34_2_fu_322_p1 = bitcast_ln34_2_fu_308_p1[22:0];

assign trunc_ln34_fu_256_p1 = bitcast_ln34_fu_243_p1[22:0];

assign trunc_ln37_fu_364_p1 = bitcast_ln37_fu_350_p1[22:0];

assign trunc_ln40_fu_406_p1 = bitcast_ln40_fu_392_p1[22:0];

assign trunc_ln43_fu_448_p1 = bitcast_ln43_fu_434_p1[22:0];

assign trunc_ln46_fu_490_p1 = bitcast_ln46_fu_476_p1[22:0];

assign xor_ln34_fu_608_p2 = (1'd1 ^ and_ln34_fu_526_p2);

assign xor_ln37_fu_626_p2 = (or_ln37_1_fu_620_p2 ^ 1'd1);

assign xor_ln40_fu_644_p2 = (or_ln40_1_fu_638_p2 ^ 1'd1);

endmodule //color_mapping
