-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_mapping is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    val_r : IN STD_LOGIC_VECTOR (23 downto 0);
    jet_rgb : OUT STD_LOGIC_VECTOR (23 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of color_mapping is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_mapping_color_mapping,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=13.468000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=9.211500,HLS_SYN_LAT=21,HLS_SYN_TPT=1,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=2749,HLS_SYN_LUT=3340,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_3FB8AA3B : STD_LOGIC_VECTOR (31 downto 0) := "00111111101110001010101000111011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv24_47AA : STD_LOGIC_VECTOR (23 downto 0) := "000000000100011110101010";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv24_FF2400 : STD_LOGIC_VECTOR (23 downto 0) := "111111110010010000000000";
    constant ap_const_lv24_FF7F00 : STD_LOGIC_VECTOR (23 downto 0) := "111111110111111100000000";
    constant ap_const_lv24_FF80 : STD_LOGIC_VECTOR (23 downto 0) := "000000001111111110000000";
    constant ap_const_lv24_40E0D0 : STD_LOGIC_VECTOR (23 downto 0) := "010000001110000011010000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal red_start : STD_LOGIC_VECTOR (31 downto 0);
    signal orange_start : STD_LOGIC_VECTOR (31 downto 0);
    signal green_start : STD_LOGIC_VECTOR (31 downto 0);
    signal cyan_start : STD_LOGIC_VECTOR (31 downto 0);
    signal blue_start : STD_LOGIC_VECTOR (31 downto 0);
    signal thres_low : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_log_generic_float_s_fu_165_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gray_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln34_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_3_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_3_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_3_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_3_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_2_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_2_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_2_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_2_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_1_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_log_generic_float_s_fu_165_ap_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_ignoreCallOp29 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp29 : BOOLEAN;
    signal storemerge4_fu_674_p13 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln34_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln34_1_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_246_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_256_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_1_fu_274_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln34_2_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_312_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_2_fu_322_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_5_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_4_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_2_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln37_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_354_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln37_fu_364_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln37_1_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln40_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_fu_406_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln40_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln43_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_fu_448_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln43_1_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln46_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_480_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_fu_490_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln34_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_1_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_2_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_4_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_1_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_3_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_3_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_2_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_3_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_1_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_1_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_2_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_3_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_4_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_4_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_4_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge4_fu_674_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal storemerge4_fu_674_p11 : STD_LOGIC_VECTOR (23 downto 0);
    signal storemerge4_fu_674_p12 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal storemerge4_fu_674_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge4_fu_674_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge4_fu_674_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge4_fu_674_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge4_fu_674_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component color_mapping_log_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component color_mapping_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component color_mapping_uitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component color_mapping_sparsemux_11_4_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (23 downto 0);
        def : IN STD_LOGIC_VECTOR (23 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component color_mapping_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        red_start : OUT STD_LOGIC_VECTOR (31 downto 0);
        orange_start : OUT STD_LOGIC_VECTOR (31 downto 0);
        green_start : OUT STD_LOGIC_VECTOR (31 downto 0);
        cyan_start : OUT STD_LOGIC_VECTOR (31 downto 0);
        blue_start : OUT STD_LOGIC_VECTOR (31 downto 0);
        thres_low : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_log_generic_float_s_fu_165 : component color_mapping_log_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        base_r => x_assign_reg_708,
        ap_return => grp_log_generic_float_s_fu_165_ap_return,
        ap_ce => grp_log_generic_float_s_fu_165_ap_ce);

    control_s_axi_U : component color_mapping_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        red_start => red_start,
        orange_start => orange_start,
        green_start => green_start,
        cyan_start => cyan_start,
        blue_start => blue_start,
        thres_low => thres_low);

    fmul_32ns_32ns_32_3_max_dsp_1_U19 : component color_mapping_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_713,
        din1 => ap_const_lv32_3FB8AA3B,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    uitofp_32ns_32_4_no_dsp_1_U20 : component color_mapping_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_185_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U21 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => red_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_188_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U22 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => orange_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_193_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U23 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => orange_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_198_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U24 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => green_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_203_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U25 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => green_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_208_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U26 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => cyan_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_213_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U27 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => cyan_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_218_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U28 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => blue_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_223_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U29 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => blue_start,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_228_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U30 : component color_mapping_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_718,
        din1 => thres_low,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_233_p2);

    sparsemux_11_4_24_1_1_U31 : component color_mapping_sparsemux_11_4_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "1000",
        din0_WIDTH => 24,
        CASE1 => "0100",
        din1_WIDTH => 24,
        CASE2 => "0010",
        din2_WIDTH => 24,
        CASE3 => "0001",
        din3_WIDTH => 24,
        CASE4 => "0000",
        din4_WIDTH => 24,
        def_WIDTH => 24,
        sel_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => ap_const_lv24_FF2400,
        din1 => ap_const_lv24_FF7F00,
        din2 => ap_const_lv24_FF80,
        din3 => ap_const_lv24_40E0D0,
        din4 => storemerge4_fu_674_p10,
        def => storemerge4_fu_674_p11,
        sel => storemerge4_fu_674_p12,
        dout => storemerge4_fu_674_p13);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln34_3_reg_783 <= and_ln34_3_fu_344_p2;
                and_ln37_2_reg_789 <= and_ln37_2_fu_386_p2;
                and_ln40_2_reg_795 <= and_ln40_2_fu_428_p2;
                and_ln43_1_reg_801 <= and_ln43_1_fu_470_p2;
                gray_reg_718 <= grp_fu_180_p2;
                icmp_ln34_2_reg_773 <= icmp_ln34_2_fu_296_p2;
                icmp_ln34_3_reg_778 <= icmp_ln34_3_fu_302_p2;
                icmp_ln46_1_reg_812 <= icmp_ln46_1_fu_500_p2;
                icmp_ln46_reg_807 <= icmp_ln46_fu_494_p2;
                or_ln34_reg_767 <= or_ln34_fu_290_p2;
                tmp_reg_713 <= grp_log_generic_float_s_fu_165_ap_return;
                x_assign_reg_708 <= grp_fu_185_p1;
            end if;
        end if;
    end process;
    and_ln34_1_fu_510_p2 <= (or_ln34_reg_767 and or_ln34_1_fu_506_p2);
    and_ln34_2_fu_515_p2 <= (grp_fu_188_p2 and and_ln34_1_fu_510_p2);
    and_ln34_3_fu_344_p2 <= (or_ln34_fu_290_p2 and or_ln34_2_fu_338_p2);
    and_ln34_4_fu_521_p2 <= (grp_fu_193_p2 and and_ln34_3_reg_783);
    and_ln34_fu_526_p2 <= (and_ln34_4_fu_521_p2 and and_ln34_2_fu_515_p2);
    and_ln37_1_fu_532_p2 <= (grp_fu_198_p2 and and_ln34_3_reg_783);
    and_ln37_2_fu_386_p2 <= (or_ln37_fu_380_p2 and or_ln34_fu_290_p2);
    and_ln37_3_fu_537_p2 <= (grp_fu_203_p2 and and_ln37_2_reg_789);
    and_ln37_4_fu_614_p2 <= (xor_ln34_fu_608_p2 and and_ln37_fu_542_p2);
    and_ln37_fu_542_p2 <= (and_ln37_3_fu_537_p2 and and_ln37_1_fu_532_p2);
    and_ln40_1_fu_548_p2 <= (grp_fu_208_p2 and and_ln37_2_reg_789);
    and_ln40_2_fu_428_p2 <= (or_ln40_fu_422_p2 and or_ln34_fu_290_p2);
    and_ln40_3_fu_553_p2 <= (grp_fu_213_p2 and and_ln40_2_reg_795);
    and_ln40_4_fu_632_p2 <= (xor_ln37_fu_626_p2 and and_ln40_fu_558_p2);
    and_ln40_fu_558_p2 <= (and_ln40_3_fu_553_p2 and and_ln40_1_fu_548_p2);
    and_ln43_1_fu_470_p2 <= (or_ln43_fu_464_p2 and or_ln34_fu_290_p2);
    and_ln43_2_fu_569_p2 <= (grp_fu_223_p2 and and_ln43_1_reg_801);
    and_ln43_3_fu_650_p2 <= (xor_ln40_fu_644_p2 and and_ln43_2_fu_569_p2);
    and_ln43_4_fu_656_p2 <= (and_ln43_fu_564_p2 and and_ln43_3_fu_650_p2);
    and_ln43_fu_564_p2 <= (grp_fu_218_p2 and and_ln40_2_reg_795);
    and_ln46_1_fu_574_p2 <= (grp_fu_228_p2 and and_ln43_1_reg_801);
    and_ln46_2_fu_583_p2 <= (or_ln46_fu_579_p2 and or_ln34_reg_767);
    and_ln46_3_fu_588_p2 <= (grp_fu_233_p2 and and_ln46_2_fu_583_p2);
    and_ln46_fu_594_p2 <= (and_ln46_3_fu_588_p2 and and_ln46_1_fu_574_p2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp29 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln34_1_fu_260_p1 <= red_start;
    bitcast_ln34_2_fu_308_p1 <= orange_start;
    bitcast_ln34_fu_243_p1 <= gray_reg_718;
    bitcast_ln37_fu_350_p1 <= green_start;
    bitcast_ln40_fu_392_p1 <= cyan_start;
    bitcast_ln43_fu_434_p1 <= blue_start;
    bitcast_ln46_fu_476_p1 <= thres_low;
    grp_fu_185_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_r),32));

    grp_log_generic_float_s_fu_165_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001_ignoreCallOp29)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp29)) then 
            grp_log_generic_float_s_fu_165_ap_ce <= ap_const_logic_1;
        else 
            grp_log_generic_float_s_fu_165_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln34_1_fu_284_p2 <= "1" when (trunc_ln34_fu_256_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_2_fu_296_p2 <= "0" when (tmp_2_fu_264_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_3_fu_302_p2 <= "1" when (trunc_ln34_1_fu_274_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_4_fu_326_p2 <= "0" when (tmp_5_fu_312_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_5_fu_332_p2 <= "1" when (trunc_ln34_2_fu_322_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_278_p2 <= "0" when (tmp_1_fu_246_p4 = ap_const_lv8_FF) else "1";
    icmp_ln37_1_fu_374_p2 <= "1" when (trunc_ln37_fu_364_p1 = ap_const_lv23_0) else "0";
    icmp_ln37_fu_368_p2 <= "0" when (tmp_s_fu_354_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_1_fu_416_p2 <= "1" when (trunc_ln40_fu_406_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_fu_410_p2 <= "0" when (tmp_10_fu_396_p4 = ap_const_lv8_FF) else "1";
    icmp_ln43_1_fu_458_p2 <= "1" when (trunc_ln43_fu_448_p1 = ap_const_lv23_0) else "0";
    icmp_ln43_fu_452_p2 <= "0" when (tmp_13_fu_438_p4 = ap_const_lv8_FF) else "1";
    icmp_ln46_1_fu_500_p2 <= "1" when (trunc_ln46_fu_490_p1 = ap_const_lv23_0) else "0";
    icmp_ln46_fu_494_p2 <= "0" when (tmp_16_fu_480_p4 = ap_const_lv8_FF) else "1";
    jet_rgb <= storemerge4_fu_674_p13;
    or_ln34_1_fu_506_p2 <= (icmp_ln34_3_reg_778 or icmp_ln34_2_reg_773);
    or_ln34_2_fu_338_p2 <= (icmp_ln34_5_fu_332_p2 or icmp_ln34_4_fu_326_p2);
    or_ln34_fu_290_p2 <= (icmp_ln34_fu_278_p2 or icmp_ln34_1_fu_284_p2);
    or_ln37_1_fu_620_p2 <= (and_ln37_fu_542_p2 or and_ln34_fu_526_p2);
    or_ln37_fu_380_p2 <= (icmp_ln37_fu_368_p2 or icmp_ln37_1_fu_374_p2);
    or_ln40_1_fu_638_p2 <= (or_ln37_1_fu_620_p2 or and_ln40_fu_558_p2);
    or_ln40_fu_422_p2 <= (icmp_ln40_fu_410_p2 or icmp_ln40_1_fu_416_p2);
    or_ln43_fu_464_p2 <= (icmp_ln43_fu_452_p2 or icmp_ln43_1_fu_458_p2);
    or_ln46_fu_579_p2 <= (icmp_ln46_reg_807 or icmp_ln46_1_reg_812);
    storemerge4_fu_674_p10 <= 
        ap_const_lv24_47AA when (and_ln46_fu_594_p2(0) = '1') else 
        ap_const_lv24_0;
    storemerge4_fu_674_p11 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
    storemerge4_fu_674_p12 <= (((and_ln34_fu_526_p2 & and_ln37_4_fu_614_p2) & and_ln40_4_fu_632_p2) & and_ln43_4_fu_656_p2);
    tmp_10_fu_396_p4 <= bitcast_ln40_fu_392_p1(30 downto 23);
    tmp_13_fu_438_p4 <= bitcast_ln43_fu_434_p1(30 downto 23);
    tmp_16_fu_480_p4 <= bitcast_ln46_fu_476_p1(30 downto 23);
    tmp_1_fu_246_p4 <= bitcast_ln34_fu_243_p1(30 downto 23);
    tmp_2_fu_264_p4 <= bitcast_ln34_1_fu_260_p1(30 downto 23);
    tmp_5_fu_312_p4 <= bitcast_ln34_2_fu_308_p1(30 downto 23);
    tmp_s_fu_354_p4 <= bitcast_ln37_fu_350_p1(30 downto 23);
    trunc_ln34_1_fu_274_p1 <= bitcast_ln34_1_fu_260_p1(23 - 1 downto 0);
    trunc_ln34_2_fu_322_p1 <= bitcast_ln34_2_fu_308_p1(23 - 1 downto 0);
    trunc_ln34_fu_256_p1 <= bitcast_ln34_fu_243_p1(23 - 1 downto 0);
    trunc_ln37_fu_364_p1 <= bitcast_ln37_fu_350_p1(23 - 1 downto 0);
    trunc_ln40_fu_406_p1 <= bitcast_ln40_fu_392_p1(23 - 1 downto 0);
    trunc_ln43_fu_448_p1 <= bitcast_ln43_fu_434_p1(23 - 1 downto 0);
    trunc_ln46_fu_490_p1 <= bitcast_ln46_fu_476_p1(23 - 1 downto 0);
    xor_ln34_fu_608_p2 <= (ap_const_lv1_1 xor and_ln34_fu_526_p2);
    xor_ln37_fu_626_p2 <= (or_ln37_1_fu_620_p2 xor ap_const_lv1_1);
    xor_ln40_fu_644_p2 <= (or_ln40_1_fu_638_p2 xor ap_const_lv1_1);
end behav;
