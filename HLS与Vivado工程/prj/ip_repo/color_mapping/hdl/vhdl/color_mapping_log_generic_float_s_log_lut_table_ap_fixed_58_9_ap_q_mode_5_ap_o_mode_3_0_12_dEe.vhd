-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity color_mapping_log_generic_float_s_log_lut_table_ap_fixed_58_9_ap_q_mode_5_ap_o_mode_3_0_12_dEe is 
    generic(
             DataWidth     : integer := 37; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of color_mapping_log_generic_float_s_log_lut_table_ap_fixed_58_9_ap_q_mode_5_ap_o_mode_3_0_12_dEe is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000000000000000000000000000", 1 => "0000010000000000000000000111110000000", 2 => "0000100000000000000000011111100000000", 3 => "0000110000000000000001000111010000000", 
    4 => "0001000000000000000001111111000000000", 5 => "0001010000000000000011000110110000001", 6 => "0001100000000000000100011110100000010", 7 => "0001110000000000000110000110010000011", 
    8 => "0010000000000000000111111110000000101", 9 => "0010010000000000001010000101110000111", 10 => "0010100000000000001100011101100001010", 11 => "0010110000000000001111000101010001101", 
    12 => "0011000000000000010001111101000010001", 13 => "0011010000000000010101000100110010110", 14 => "0011100000000000011000011100100011100", 15 => "0011110000000000011100000100010100011", 
    16 => "0100000000000000011111111100000101010", 17 => "0100010000000000100100000011110110011", 18 => "0100100000000000101000011011100111100", 19 => "0100110000000000101101000011011000111", 
    20 => "0101000000000000110001111011001010011", 21 => "0101010000000000110111000010111100000", 22 => "0101100000000000111100011010101101110", 23 => "0101110000000001000010000010011111110", 
    24 => "0110000000000001000111111010010001111", 25 => "0110010000000001001110000010000100010", 26 => "0110100000000001010100011001110110110", 27 => "0110110000000001011011000001101001100", 
    28 => "0111000000000001100001111001011100100", 29 => "0111010000000001101001000001001111101", 30 => "0111100000000001110000011001000011000", 31 => "0111110000000001111000000000110110101", 
    32 => "1000000000000001111111111000101010100", 33 => "1000010000000010001000000000011110101", 34 => "1000100000000010010000011000010011000", 35 => "1000110000000010011001000000000111110", 
    36 => "1001000000000010100001110111111100101", 37 => "1001010000000010101010111111110001111", 38 => "1001100000000010110100010111100111010", 39 => "1001110000000010111101111111011101001", 
    40 => "1010000000000011000111110111010011001", 41 => "1010010000000011010001111111001001101", 42 => "1010100000000011011100010111000000010", 43 => "1010110000000011100110111110110111011", 
    44 => "1011000000000011110001110110101110110", 45 => "1011010000000011111100111110100110100", 46 => "1011100000000100001000010110011110101", 47 => "1011110000000100010011111110010111000", 
    48 => "1100000000000100011111110110001111111", 49 => "1100010000000100101011111110001001000", 50 => "1100100000000100111000010110000010101", 51 => "1100110000000101000100111101111100100", 
    52 => "1101000000000101010001110101110110111", 53 => "1101010000000101011110111101110001101", 54 => "1101100000000101101100010101101100111", 55 => "1101110000000101111001111101101000011", 
    56 => "1110000000000110000111110101100100100", 57 => "1110010000000110010101111101100000111", 58 => "1110100000000110100100010101011101111", 59 => "1110110000000110110010111101011011010", 
    60 => "1111000000000111000001110101011001000", 61 => "1111010000000111010000111101010111010", 62 => "1111100000000111100000010101010110001", 63 => "1111110000000111101111111101010101011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

